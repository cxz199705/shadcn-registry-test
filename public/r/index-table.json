{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "index-table",
  "type": "registry:block",
  "title": "Index Table",
  "description": "A index table component",
  "dependencies": [
    "lodash",
    "lucide-react",
    "nuqs",
    "react-hook-form"
  ],
  "registryDependencies": [
    "button",
    "label",
    "popover",
    "radio-group",
    "tooltip",
    "dialog",
    "form"
  ],
  "files": [
    {
      "path": "registry/new-york/types/field.ts",
      "content": "type Prev = [never, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\ntype Join<K, P> = K extends string | number\n  ? P extends string | number\n    ? `${K}${\"\" extends P ? \"\" : \".\"}${P}`\n    : never\n  : never;\n\nexport type Field<T, D extends Prev[number] = 3> = [D] extends [never]\n  ? never\n  : T extends object\n  ? {\n      [K in keyof T]-?: K extends string | number\n        ? T[K] extends Date\n          ? `${K}`\n          : Join<K, Field<T[K], Prev[D]>>\n        : never;\n    }[keyof T]\n  : \"\";\n",
      "type": "registry:file",
      "target": "components/turboost-ui/types/field.ts"
    },
    {
      "path": "registry/new-york/blocks/index-table/types/index-table-a.ts",
      "content": "import { type OrderDirection } from \"@/registry/new-york/blocks/index-table/types/order-direction\";\n\nexport interface IndexTableOrder<OrderField> {\n  field: OrderField;\n  direction: OrderDirection;\n}\n\nexport interface IndexTableEdge<Node> {\n  node: Node;\n  cursor: string;\n}\n\nexport interface IndexTablePageInfo {\n  endCursor?: string | null;\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n  startCursor?: string | null;\n}\n\nexport interface IndexTablePagination {\n  first?: number;\n  last?: number;\n  before?: string | null;\n  after?: string | null;\n}\n\nexport interface IndexTableValue<OrderField> extends IndexTablePagination {\n  query?: string;\n  orderBy?: IndexTableOrder<OrderField>;\n}\n",
      "type": "registry:file",
      "target": "components/turboost-ui/index-table/types/index-table-a.ts"
    },
    {
      "path": "registry/new-york/blocks/index-table/types/order-direction.ts",
      "content": "export enum OrderDirection {\n  ASC = \"ASC\",\n  DESC = \"DESC\",\n}\n",
      "type": "registry:file",
      "target": "components/turboost-ui/index-table/types/order-direction.ts"
    },
    {
      "path": "registry/new-york/blocks/index-table/utils/build-graphql-query-from-filter-values.ts",
      "content": "import dayjs from \"dayjs\";\nimport { compact, get, trim } from \"lodash\";\n\nimport { FilterItemProps } from \"@/registry/new-york/blocks/filter/filter\";\nimport { Field } from \"@/registry/new-york/types/field\";\n\nexport function buildGraphqlQueryFromFilterValues<Node>(\n  filters: FilterItemProps<Node>[],\n  filterValues?: Record<Field<Node>, any>\n): string {\n  return compact([\n    trim((filterValues as any)?.query),\n    trim(\n      filters.reduce((result, filter) => {\n        const filterValue: any = get(filterValues ?? {}, filter.field);\n\n        if (typeof filterValue !== \"undefined\") {\n          if (typeof filterValue === \"string\") {\n            return `${result} ${filter.field}:\"${filterValue}\"`;\n          }\n\n          if (filterValue instanceof Array) {\n            if (filterValue.length === 0) {\n              return result;\n            }\n\n            if (\n              filterValue[0] instanceof Date &&\n              filterValue[1] instanceof Date\n            ) {\n              return `${result} (${filterValue\n                .map((item: Date, index) => {\n                  return `${filter.field}:${index === 0 ? \">=\" : \"<=\"}${\n                    index === 0\n                      ? dayjs(item).toISOString()\n                      : dayjs(item).endOf(\"day\").toISOString()\n                  }`;\n                })\n                .join(\" \")})`;\n            }\n\n            return `${result} (${filterValue\n              .map((item) => {\n                if (typeof item === \"string\") {\n                  return `${filter.field}:\"${item}\"`;\n                }\n\n                return `${filter.field}:\"${item}\"`;\n              })\n              .join(\" OR \")})`;\n          }\n\n          return `${result} ${filter.field}: ${\n            filterValue instanceof Date\n              ? filterValue.toISOString()\n              : filterValue\n          }`;\n        }\n\n        return result;\n      }, \"\")\n    ),\n  ])\n    .map((item) => `(${item})`)\n    .join(\" \");\n}\n",
      "type": "registry:file",
      "target": "components/turboost-ui/index-table/utils/build-graphql-query-from-filter-values.ts"
    },
    {
      "path": "registry/new-york/blocks/filter/filter.tsx",
      "content": "import dayjs from \"dayjs\";\nimport { forEach, isPlainObject, omitBy, transform } from \"lodash\";\nimport { ChevronDown, Loader2, Plus, Search, X } from \"lucide-react\";\nimport {\n  type ReactElement,\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { cn } from \"@/lib/utils\";\nimport { type Field } from \"@/registry/new-york/types/field\";\nimport { Badge } from \"@/registry/new-york/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/new-york/ui/dropdown-menu\";\nimport { Input } from \"@/registry/new-york/blocks/input/input\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/registry/new-york/ui/popover\";\n\nconst isEmpty = (value: unknown): boolean => {\n  return (\n    typeof value === \"undefined\" ||\n    value === \"\" ||\n    (value instanceof Array && value.length === 0)\n  );\n};\n\nconst omitEmpty = (obj: any): any => omitBy(obj, isEmpty);\n\nconst formatRenderValue = (obj: any): any => {\n  return transform<any, any>(\n    obj,\n    (result, value, key) => {\n      if (isPlainObject(value) || Array.isArray(value)) {\n        forEach(formatRenderValue(value), (flattenedValue, flattenedKey) => {\n          if (Array.isArray(value)) {\n            if (typeof result[key] === \"undefined\") {\n              result[key] = [];\n            }\n          } else {\n            if (typeof result[key] === \"undefined\") {\n              result[key] = {};\n            }\n          }\n\n          result[key][flattenedKey] =\n            flattenedValue instanceof Date\n              ? dayjs(flattenedValue).format(\"YYYY-MM-DD\")\n              : flattenedValue;\n        });\n      } else {\n        result[key] =\n          value instanceof Date ? dayjs(value).format(\"YYYY-MM-DD\") : value;\n      }\n    },\n    {}\n  );\n};\n\nconst flattenObject = (obj: any): any => {\n  return transform<any, any>(\n    obj,\n    (result, value, key) => {\n      if (typeof key === \"string\" && isPlainObject(value)) {\n        const nested = flattenObject(value);\n        forEach(nested, (nestedValue, nestedKey) => {\n          result[`${key}.${nestedKey}`] = nestedValue;\n        });\n      } else {\n        result[key] = value;\n      }\n    },\n    {}\n  );\n};\n\nexport type FilterTypeValue =\n  | StringConstructor\n  | NumberConstructor\n  | BooleanConstructor\n  | DateConstructor\n  | ArrayConstructor;\n\nexport interface FilterItemProps<T> {\n  label: string;\n  field: Field<T>;\n  render: ({\n    field: { value, onChange },\n  }: {\n    field: {\n      value: any;\n      onChange: (value: any) => void;\n    };\n  }) => ReactElement;\n  renderValue?: (options: {\n    label: string;\n    field: Field<T>;\n    value: any;\n  }) => ReactNode;\n  pinned?: boolean;\n  type?: FilterTypeValue;\n  itemType?: FilterTypeValue;\n}\n\nexport interface FilterSearchConfig {\n  querySuffix?: ReactNode;\n  queryPrefix?: ReactNode;\n  queryPlaceholder?: string;\n  disabled?: boolean;\n}\n\nexport interface FilterProps<T> {\n  className?: string;\n  loading?: boolean;\n  filters?: Array<FilterItemProps<T>>;\n  extra?: ReactNode;\n  search?: false | FilterSearchConfig;\n  showFilterItems?: boolean;\n  values?: Record<Field<T>, any> & { query?: string };\n  onChange?: (value: Record<Field<T>, any> & { query?: string }) => void;\n  t?: Function;\n}\n\nexport function Filter<T>({\n  className,\n  loading = false,\n  filters = [],\n  extra,\n  search,\n  showFilterItems = true,\n  values,\n  onChange,\n  t,\n}: FilterProps<T>): ReactElement {\n  const translate = useMemo(() => {\n    return typeof t === \"function\" ? t : () => undefined;\n  }, [t]);\n\n  const { control, setValue, watch, reset } = useForm<any>();\n\n  // 将筛选条件分组为固定和非固定两类\n  const [{ fixedFilters, unfixedFilters }, setFilterGroups] = useState({\n    fixedFilters: filters.filter((item) => item.pinned),\n    unfixedFilters: filters.filter((item) => item.pinned !== true),\n  });\n\n  const handleChange = useCallback(() => {\n    onChange?.(omitEmpty(flattenObject(watch())));\n  }, [onChange, watch]);\n\n  // 设置筛选条件固定状态\n  const setFilterFieldPinnedStatus = useCallback(\n    (field: Field<T>, pinned: boolean) => {\n      setFilterGroups((prev) => {\n        return {\n          ...prev,\n          fixedFilters: pinned\n            ? [\n                ...prev.fixedFilters,\n                ...prev.unfixedFilters\n                  .filter((item) => item.field === field)\n                  .map((item) => ({ ...item, pinned })),\n              ]\n            : prev.fixedFilters.filter((item) => item.field !== field),\n          unfixedFilters: pinned\n            ? prev.unfixedFilters.filter((item) => item.field !== field)\n            : [\n                ...prev.unfixedFilters,\n                ...prev.fixedFilters\n                  .filter((item) => item.field === field)\n                  .map((item) => ({ ...item, pinned })),\n              ],\n        };\n      });\n    },\n    []\n  );\n\n  useEffect(() => {\n    // 获取当前表单中所有字段的值\n    const currentFormValues = watch();\n    // 准备新的表单值\n    const newFormValues = { ...currentFormValues };\n\n    // 将所有在 watch() 中但不在 values 中的字段设置为 undefined\n    Object.keys(currentFormValues).forEach((key) => {\n      if (\n        typeof values !== \"undefined\" &&\n        !Object.prototype.hasOwnProperty.call(values, key)\n      ) {\n        newFormValues[key] = undefined;\n      }\n    });\n\n    // 将 values 中的值应用到表单\n    if (typeof values !== \"undefined\") {\n      Object.keys(values).forEach((key) => {\n        newFormValues[key as keyof typeof values] =\n          values[key as keyof typeof values];\n      });\n    }\n\n    // 重置表单，应用新的值\n    reset(newFormValues);\n  }, [values, watch, reset]);\n\n  return (\n    <div className={cn(\"space-y-3\", showFilterItems && \"flex-1\", className)}>\n      {!(\n        (typeof search === \"undefined\" || search === false) &&\n        typeof extra === \"undefined\"\n      ) && (\n        <div className=\"flex items-center gap-2\">\n          {typeof search !== \"undefined\" && search !== false && (\n            <Controller<{ query: string }>\n              control={control}\n              name=\"query\"\n              render={({ field }) => (\n                <Input\n                  disabled={field?.disabled ?? search?.disabled}\n                  placeholder={search?.queryPlaceholder}\n                  prefix={search?.queryPrefix ?? <Search className=\"size-4\" />}\n                  suffix={\n                    loading ? (\n                      <Loader2 className=\"animate-spin\" />\n                    ) : (\n                      search?.querySuffix\n                    )\n                  }\n                  value={field.value}\n                  onChange={(value) => {\n                    field.onChange(value);\n                  }}\n                  onKeyDown={(e) => {\n                    if (e.key === \"Enter\" && typeof search !== \"undefined\") {\n                      e.preventDefault();\n                      handleChange();\n                    }\n                  }}\n                />\n              )}\n            />\n          )}\n\n          {extra}\n        </div>\n      )}\n\n      {showFilterItems && filters.length > 0 && (\n        <div className=\"flex flex-wrap gap-2\">\n          {fixedFilters.map(({ field, label, render, renderValue }) => {\n            const originalFilter = filters.find((item) => item.field === field);\n            const fieldValue = watch(field);\n\n            return (\n              <Popover\n                // Dialog -> Popover -> ScrollArea 时会有滚动问题，需要加 modal={true}\n                // issue:https://github.com/shadcn-ui/ui/issues/922\n                modal={true}\n                defaultOpen={originalFilter?.pinned !== true}\n                onOpenChange={(open) => {\n                  // 关闭筛选弹窗的时候如果该筛选条件没有值，则将其移除固定项\n                  if (\n                    !open &&\n                    typeof fieldValue === \"undefined\" &&\n                    originalFilter?.pinned !== true\n                  ) {\n                    setFilterFieldPinnedStatus(field, false);\n                  }\n                }}\n                key={field}\n              >\n                <PopoverTrigger asChild className=\"whitespace-normal\">\n                  <Badge\n                    variant=\"outline\"\n                    className=\"hover:bg-accent rounded-full px-2 py-1\"\n                  >\n                    <span className=\"flex items-center gap-1\">\n                      {isEmpty(fieldValue) ? (\n                        <>\n                          <span>{label}</span>{\" \"}\n                          <ChevronDown className=\"size-4\" />\n                        </>\n                      ) : (\n                        <>\n                          <span>\n                            {`${label}: ${String(\n                              typeof renderValue !== \"undefined\"\n                                ? renderValue({\n                                    field,\n                                    label,\n                                    value: formatRenderValue({\n                                      [field]: fieldValue,\n                                    })[field],\n                                  })\n                                : formatRenderValue({ [field]: fieldValue })[\n                                    field\n                                  ]\n                            )}`}\n                          </span>\n\n                          <X\n                            className=\"size-4 shrink-0 cursor-pointer\"\n                            onClick={(event) => {\n                              event.stopPropagation();\n                              close();\n                              setValue(field, undefined as any);\n\n                              // 如果该筛选条件是非原固定筛选条件，则将其移除\n                              if (originalFilter?.pinned !== true) {\n                                setFilterFieldPinnedStatus(field, false);\n                              }\n\n                              handleChange();\n                            }}\n                          />\n                        </>\n                      )}\n                    </span>\n                  </Badge>\n                </PopoverTrigger>\n\n                <PopoverContent className=\"w-fit\">\n                  <Controller\n                    control={control}\n                    name={field}\n                    render={(renderProps) =>\n                      render({\n                        ...renderProps,\n                        field: {\n                          ...renderProps.field,\n                          onChange: (value) => {\n                            renderProps.field.onChange(value);\n                            handleChange();\n                          },\n                        },\n                      })\n                    }\n                  />\n                </PopoverContent>\n              </Popover>\n            );\n          })}\n\n          {unfixedFilters.length > 0 && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Badge\n                  variant=\"outline\"\n                  className=\"hover:bg-accent rounded-full px-2 py-1\"\n                >\n                  <span>{translate(\"turboost_ui.filters.add_filter\")}</span>\n                  <Plus className=\"size-4 shrink-0\" />\n                </Badge>\n              </DropdownMenuTrigger>\n\n              <DropdownMenuContent>\n                {unfixedFilters.map(({ field, label }) => {\n                  return (\n                    <DropdownMenuItem\n                      key={field}\n                      onClick={() => {\n                        setFilterFieldPinnedStatus(field, true);\n                      }}\n                    >\n                      <div className=\"w-full text-center text-xs font-semibold\">\n                        {label}\n                      </div>\n                    </DropdownMenuItem>\n                  );\n                })}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/turboost-ui/filter/filter.tsx"
    },
    {
      "path": "registry/new-york/blocks/table/table.tsx",
      "content": "\"use client\";\n\nimport {\n  type AccessorKeyColumnDef,\n  type ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  type RowSelectionState,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport { cloneDeep, groupBy, reduce, sum } from \"lodash\";\nimport {\n  type ReactElement,\n  type RefObject,\n  useCallback,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nimport {\n  EmptyState,\n  type EmptyStateProps,\n} from \"@/registry/new-york/blocks/empty-state/empty-state\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Checkbox } from \"@/registry/new-york/ui/checkbox\";\nimport { RadioGroup, RadioGroupItem } from \"@/registry/new-york/ui/radio-group\";\nimport { Loader2 } from \"lucide-react\";\n\nconst columnAlignClass = {\n  left: \"text-left\",\n  center: \"text-center\",\n  right: \"text-right\",\n};\n\nconst columnWrapClass = {\n  true: \"break-words\",\n  false: \"whitespace-nowrap\",\n};\n\nexport interface TableActionType {\n  resetRowSelection: () => void;\n}\n\nexport type TableColumnProps<T> = ColumnDef<T> & {\n  align?: \"left\" | \"center\" | \"right\";\n  pin?: \"left\" | \"right\" | false;\n  wordWrap?: boolean;\n};\n\nexport interface TableProps<T> {\n  tableActionRef?: RefObject<TableActionType | null>;\n  emptyStateIcon?: EmptyStateProps[\"icon\"];\n  emptyStateTitle?: EmptyStateProps[\"title\"];\n  emptyStateDescription?: EmptyStateProps[\"description\"];\n  columns: Array<TableColumnProps<T>>;\n  rowSelection?: {\n    single?: boolean;\n    allowSelectAll?: boolean;\n    onSelectionChange?: (rows: T[]) => void;\n    bulkActions?: (\n      rows: T[],\n      isSelectedAll: boolean\n    ) => React.ComponentProps<\"button\">[];\n  };\n  data: T[];\n  bodyHeight?: {\n    max?: number;\n    min?: number;\n  };\n  loading?: boolean;\n  onRow?: (record: T) => {\n    onClick?: (e: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => void;\n  };\n  t?: Function;\n}\n\nexport function Table<T>({\n  emptyStateIcon,\n  emptyStateTitle,\n  emptyStateDescription,\n  tableActionRef,\n  columns,\n  data,\n  rowSelection,\n  loading = false,\n  bodyHeight,\n  onRow,\n  t,\n}: TableProps<T>): ReactElement {\n  const translate = useMemo(() => {\n    return typeof t === \"function\" ? t : () => undefined;\n  }, [t]);\n\n  const tableHeaderRef = useRef<HTMLTableElement>(null);\n  const tableFooterRef = useRef<HTMLTableElement>(null);\n\n  const [internalRowSelection, setInternalRowSelection] =\n    useState<RowSelectionState>({});\n\n  // 不是当前页的选中全部\n  const [isRowSelectedAll, setIsRowSelectedAll] = useState(false);\n\n  const hasBulkActions = useMemo(() => {\n    return (\n      typeof rowSelection?.bulkActions !== \"undefined\" &&\n      rowSelection.bulkActions([], false).length !== 0\n    );\n  }, [rowSelection]);\n\n  const memoColumns = useMemo(() => {\n    const cloneColumns = cloneDeep(columns);\n\n    if (typeof rowSelection !== \"undefined\") {\n      cloneColumns.unshift({\n        id: \"row-select\",\n        size: 40,\n        maxSize: 40,\n        pin: cloneColumns.some(\n          (column) =>\n            typeof column.pin !== \"undefined\" &&\n            typeof column.pin !== \"boolean\" &&\n            [\"left\", \"right\"].includes(column.pin)\n        )\n          ? \"left\"\n          : undefined,\n        header: !(rowSelection.single ?? false)\n          ? ({ table }) => {\n              return (\n                <Checkbox\n                  checked={\n                    table.getIsAllRowsSelected()\n                      ? true\n                      : Object.keys(internalRowSelection).length > 0\n                      ? \"indeterminate\"\n                      : false\n                  }\n                  onCheckedChange={(value) => {\n                    table.toggleAllRowsSelected(\n                      [false, \"indeterminate\"].includes(value) ? false : true\n                    );\n                  }}\n                />\n              );\n            }\n          : undefined,\n        cell: ({ row, table }) =>\n          typeof rowSelection.single !== \"undefined\" && rowSelection.single ? (\n            <RadioGroup\n              value={row.getIsSelected() ? row.id : undefined}\n              onValueChange={() => {\n                table.setRowSelection({ [row.id]: true });\n              }}\n              onClick={(e) => {\n                e.stopPropagation();\n              }}\n            >\n              <RadioGroupItem value={row.id} disabled={!row.getCanSelect()} />\n            </RadioGroup>\n          ) : (\n            <Checkbox\n              checked={row.getIsSelected()}\n              disabled={!row.getCanSelect()}\n              onCheckedChange={row.getToggleSelectedHandler()}\n              onClick={(e) => {\n                e.stopPropagation();\n              }}\n            />\n          ),\n      });\n    }\n\n    return cloneColumns.map((column) =>\n      typeof column.id === \"undefined\"\n        ? {\n            ...column,\n            id: (column as AccessorKeyColumnDef<T>).accessorKey,\n          }\n        : column\n    );\n  }, [columns, internalRowSelection, rowSelection]);\n\n  const table = useReactTable({\n    data,\n    columns: memoColumns as Array<ColumnDef<T>>,\n    state: {\n      rowSelection: internalRowSelection,\n      columnPinning: reduce(\n        memoColumns.filter(\n          (column) => typeof column.pin !== \"undefined\" && column.pin !== false\n        ),\n        (acc: Record<string, string[]>, column) => {\n          if (\n            (column.pin === \"left\" || column.pin === \"right\") &&\n            !acc[column.pin]\n          ) {\n            acc[column.pin] = [];\n          }\n\n          acc[column.pin as keyof typeof column.pin].push(\n            (column as AccessorKeyColumnDef<T>).id!\n          );\n\n          return acc;\n        },\n        {}\n      ),\n    },\n    enableRowSelection: typeof rowSelection !== \"undefined\",\n    getCoreRowModel: getCoreRowModel(),\n    onRowSelectionChange: (updater) => {\n      setInternalRowSelection((old) => {\n        const newRowSelection =\n          updater instanceof Function ? updater(old) : updater;\n\n        rowSelection?.onSelectionChange?.(\n          Object.keys(newRowSelection).map((key) => table.getRow(key).original)\n        );\n\n        setIsRowSelectedAll(false);\n\n        return newRowSelection;\n      });\n    },\n  });\n\n  const columnsPinnedInfo = useMemo(() => {\n    return groupBy(\n      table.getHeaderGroups().map((headerGroup) =>\n        headerGroup.headers\n          .filter((header) => header.column.getIsPinned() !== false)\n          .map((header) => ({\n            direction: header.column.getIsPinned(),\n            size: header.column.getSize(),\n          }))\n      )[0],\n      \"direction\"\n    );\n  }, [table]);\n\n  const getColumnPinedOffset = useCallback(\n    (pinnedIndex: number, direction: \"left\" | \"right\") => {\n      if (direction === \"left\") {\n        return sum(\n          columnsPinnedInfo.left.map((item) => item.size).slice(0, pinnedIndex)\n        );\n      }\n\n      if (direction === \"right\") {\n        return sum(\n          columnsPinnedInfo.right\n            .map((item) => item.size)\n            .reverse()\n            .slice(0, table.getRightLeafColumns().length - pinnedIndex - 1)\n        );\n      }\n    },\n    [columnsPinnedInfo, table]\n  );\n\n  // 一些可以手动触发的特殊操作\n  useImperativeHandle(\n    tableActionRef,\n    () => ({\n      resetRowSelection: () => {\n        table.resetRowSelection();\n      },\n    }),\n    [table]\n  );\n\n  return (\n    <div\n      className={cn(\n        \"relative min-w-full\",\n        loading && \"pointer-events-none overflow-hidden select-none\"\n      )}\n    >\n      <div className=\"overflow-hidden\" ref={tableHeaderRef}>\n        <table className=\"w-full table-fixed\">\n          <thead className=\"relative border-b\">\n            {/* batch actions */}\n            {!(rowSelection?.single ?? false) &&\n              Object.keys(internalRowSelection).length > 0 &&\n              hasBulkActions && (\n                <tr className=\"absolute z-[2] flex w-full items-center space-x-2 bg-white px-3 py-2\">\n                  <td>\n                    <Checkbox\n                      checked={\n                        table.getIsAllRowsSelected()\n                          ? true\n                          : Object.keys(internalRowSelection).length > 0\n                          ? \"indeterminate\"\n                          : false\n                      }\n                      onCheckedChange={(value) => {\n                        table.toggleAllRowsSelected(\n                          [false, \"indeterminate\"].includes(value)\n                            ? false\n                            : true\n                        );\n                      }}\n                    />\n                  </td>\n\n                  <td className=\"text-sm text-gray-500\">\n                    {isRowSelectedAll\n                      ? translate(\n                          \"turboost_ui.table.batch_actions.selected_all\"\n                        ) ?? \"Selected all\"\n                      : translate(\n                          \"turboost_ui.table.batch_actions.selected_rows\",\n                          {\n                            rows: Object.keys(internalRowSelection).length,\n                          }\n                        ) ??\n                        `Selected ${\n                          Object.keys(internalRowSelection).length\n                        } rows`}\n                  </td>\n\n                  {typeof rowSelection?.allowSelectAll !== \"undefined\" &&\n                    rowSelection.allowSelectAll && (\n                      <td>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"text-xs\"\n                          onClick={() => {\n                            if (isRowSelectedAll) {\n                              setIsRowSelectedAll(false);\n                            } else {\n                              table.toggleAllRowsSelected(true);\n\n                              setTimeout(() => {\n                                setIsRowSelectedAll(true);\n                              });\n                            }\n                          }}\n                        >\n                          {isRowSelectedAll\n                            ? translate(\n                                \"turboost_ui.table.batch_actions.cancel\"\n                              ) ?? \"Cancel\"\n                            : translate(\n                                \"turboost_ui.table.batch_actions.select_all\"\n                              ) ?? \"Select all\"}\n                        </Button>\n                      </td>\n                    )}\n\n                  <td className=\"ml-auto flex space-x-2\">\n                    {rowSelection\n                      ?.bulkActions?.(\n                        Object.keys(internalRowSelection).map(\n                          (key) => table.getRow(key).original\n                        ),\n                        isRowSelectedAll\n                      )\n                      ?.map((action, index) => (\n                        <div key={index}>\n                          <Button\n                            {...action}\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"text-xs\"\n                          />\n                        </div>\n                      ))}\n                  </td>\n                </tr>\n              )}\n\n            {table.getHeaderGroups().map((headerGroup) => (\n              <tr className=\"relative\" key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <th\n                      className={cn(\n                        \"bg-white px-3 py-3.5 text-left text-sm font-semibold whitespace-nowrap\",\n                        typeof (header.column.columnDef as TableColumnProps<T>)\n                          ?.align !== \"undefined\" &&\n                          columnAlignClass[\n                            (header.column.columnDef as TableColumnProps<T>)\n                              .align as keyof typeof columnAlignClass\n                          ],\n                        typeof (header.column.columnDef as TableColumnProps<T>)\n                          ?.wordWrap !== \"undefined\" &&\n                          columnWrapClass[\n                            (header.column.columnDef as TableColumnProps<T>)\n                              .wordWrap as unknown as keyof typeof columnWrapClass\n                          ],\n                        header.column.getIsPinned() !== false &&\n                          \"sticky z-[1] bg-white\",\n                        header.column.getIsPinned() === \"left\" &&\n                          header.column.getPinnedIndex() ===\n                            table.getLeftLeafColumns().length - 1 &&\n                          \"drop-shadow-[1px_0_0_#e5e7eb]\",\n                        header.column.getIsPinned() === \"right\" &&\n                          header.column.getPinnedIndex() ===\n                            table.getRightLeafColumns().length - 1 &&\n                          \"drop-shadow-[-1px_0_0_#e5e7eb]\"\n                      )}\n                      key={header.id}\n                      style={{\n                        width: header.getSize(),\n                        left:\n                          header.column.getIsPinned() === \"left\" &&\n                          columnsPinnedInfo.left?.length > 0\n                            ? getColumnPinedOffset(\n                                header.column.getPinnedIndex(),\n                                \"left\"\n                              )\n                            : undefined,\n                        right:\n                          header.column.getIsPinned() === \"right\" &&\n                          columnsPinnedInfo.right?.length > 0\n                            ? getColumnPinedOffset(\n                                header.column.getPinnedIndex(),\n                                \"right\"\n                              )\n                            : undefined,\n                      }}\n                    >\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </th>\n                  );\n                })}\n              </tr>\n            ))}\n          </thead>\n        </table>\n      </div>\n\n      <div\n        className={cn(\n          typeof bodyHeight !== \"undefined\"\n            ? \"overflow-auto\"\n            : \"overflow-y-hidden\"\n        )}\n        style={{\n          minHeight:\n            typeof bodyHeight?.min !== \"undefined\"\n              ? `${bodyHeight?.min}px`\n              : undefined,\n          maxHeight:\n            typeof bodyHeight?.max !== \"undefined\"\n              ? `${bodyHeight?.max}px`\n              : undefined,\n        }}\n        onScroll={(e) => {\n          const scrollLeft = (e.target as HTMLElement).scrollLeft;\n\n          if (tableHeaderRef.current != null) {\n            tableHeaderRef.current.scrollLeft = scrollLeft;\n          }\n\n          if (tableFooterRef.current != null) {\n            tableFooterRef.current.scrollLeft = scrollLeft;\n          }\n        }}\n      >\n        <table className=\"w-full table-fixed\">\n          <tbody className=\"relative divide-y divide-gray-200\">\n            {table.getRowModel().rows.map((row) => (\n              <tr\n                className={cn(\n                  \"group bg-white hover:bg-gray-50\",\n                  onRow != null && \"cursor-pointer\"\n                )}\n                key={row.id}\n                onClick={(e) => {\n                  onRow?.(row.original)?.onClick?.(e);\n                }}\n              >\n                {row.getVisibleCells().map((cell) => (\n                  <td\n                    className={cn(\n                      \"bg-white px-3 py-4 text-sm break-words text-gray-500 group-hover:bg-gray-50\",\n                      typeof (cell.column.columnDef as TableColumnProps<T>)\n                        ?.align !== \"undefined\" &&\n                        columnAlignClass[\n                          (cell.column.columnDef as TableColumnProps<T>)\n                            .align as keyof typeof columnAlignClass\n                        ],\n                      typeof (cell.column.columnDef as TableColumnProps<T>)\n                        ?.wordWrap !== \"undefined\" &&\n                        columnWrapClass[\n                          (cell.column.columnDef as TableColumnProps<T>)\n                            .wordWrap as unknown as keyof typeof columnWrapClass\n                        ],\n                      cell.column.getIsPinned() !== false && \"sticky z-[1]\",\n                      cell.column.getIsPinned() === \"left\" &&\n                        cell.column.getPinnedIndex() ===\n                          table.getLeftLeafColumns().length - 1 &&\n                        \"drop-shadow-[1px_0_0_#e5e7eb]\",\n                      cell.column.getIsPinned() === \"right\" &&\n                        cell.column.getPinnedIndex() ===\n                          table.getRightLeafColumns().length - 1 &&\n                        \"drop-shadow-[-1px_0_0_#e5e7eb]\"\n                    )}\n                    key={cell.id}\n                    style={{\n                      width: cell.column.getSize(),\n                      left:\n                        cell.column.getIsPinned() === \"left\" &&\n                        columnsPinnedInfo.left?.length > 0\n                          ? getColumnPinedOffset(\n                              cell.column.getPinnedIndex(),\n                              \"left\"\n                            )\n                          : undefined,\n                      right:\n                        cell.column.getIsPinned() === \"right\" &&\n                        columnsPinnedInfo.right?.length > 0\n                          ? getColumnPinedOffset(\n                              cell.column.getPinnedIndex(),\n                              \"right\"\n                            )\n                          : undefined,\n                    }}\n                  >\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n\n        {data.length === 0 && (\n          <EmptyState\n            className=\"py-10\"\n            description={emptyStateDescription}\n            icon={emptyStateIcon}\n            title={emptyStateTitle}\n          />\n        )}\n      </div>\n\n      {table.getAllColumns().filter((item) => item.columnDef?.footer).length >\n        0 && (\n        <div className=\"overflow-hidden\" ref={tableFooterRef}>\n          <table className=\"w-full table-fixed border-t\">\n            <tfoot className=\"relative\">\n              {table.getFooterGroups().map((footerGroup) => (\n                <tr key={footerGroup.id}>\n                  {footerGroup.headers.map((header) => (\n                    <th\n                      className={cn(\n                        \"bg-white px-3 py-4 text-sm break-words text-gray-500\",\n                        typeof (header.column.columnDef as TableColumnProps<T>)\n                          ?.align !== \"undefined\"\n                          ? columnAlignClass[\n                              (header.column.columnDef as TableColumnProps<T>)\n                                .align as keyof typeof columnAlignClass\n                            ]\n                          : columnAlignClass.left,\n                        typeof (header.column.columnDef as TableColumnProps<T>)\n                          ?.wordWrap !== \"undefined\" &&\n                          columnWrapClass[\n                            (header.column.columnDef as TableColumnProps<T>)\n                              .wordWrap as unknown as keyof typeof columnWrapClass\n                          ],\n                        header.column.getIsPinned() !== false &&\n                          \"sticky z-[1] bg-white\",\n                        header.column.getIsPinned() === \"left\" &&\n                          header.column.getPinnedIndex() ===\n                            table.getLeftLeafColumns().length - 1 &&\n                          \"drop-shadow-[1px_0_0_#e5e7eb]\",\n                        header.column.getIsPinned() === \"right\" &&\n                          header.column.getPinnedIndex() ===\n                            table.getRightLeafColumns().length - 1 &&\n                          \"drop-shadow-[-1px_0_0_#e5e7eb]\"\n                      )}\n                      key={header.id}\n                      style={{\n                        width: header.column.getSize(),\n                        left:\n                          header.column.getIsPinned() === \"left\" &&\n                          columnsPinnedInfo.left?.length > 0\n                            ? getColumnPinedOffset(\n                                header.column.getPinnedIndex(),\n                                \"left\"\n                              )\n                            : undefined,\n                        right:\n                          header.column.getIsPinned() === \"right\" &&\n                          columnsPinnedInfo.right?.length > 0\n                            ? getColumnPinedOffset(\n                                header.column.getPinnedIndex(),\n                                \"right\"\n                              )\n                            : undefined,\n                      }}\n                    >\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.footer,\n                            header.getContext()\n                          )}\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </tfoot>\n          </table>\n        </div>\n      )}\n\n      {loading && (\n        <div className=\"absolute top-1/2 left-1/2 z-10 -translate-x-1/2 -translate-y-1/2\">\n          <Loader2 className=\"animate-spin\" />\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/turboost-ui/table/table.tsx"
    },
    {
      "path": "registry/new-york/blocks/view/view.tsx",
      "content": "\"use client\";\n\nimport { ChevronDownIcon, PlusIcon, Loader2 } from \"lucide-react\";\nimport { type ReactElement, useCallback, useMemo, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Input } from \"@/registry/new-york/ui/input\";\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/registry/new-york/ui/dialog\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/new-york/ui/dropdown-menu\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\n\ninterface ViewFormData {\n  name: string;\n}\n\nexport enum ViewItemEditType {\n  RENAME = \"rename\",\n  DELETE = \"delete\",\n}\n\nexport interface ViewItem {\n  key: string;\n  label: string;\n  canDelete?: boolean;\n  canEdit?: boolean;\n}\n\nexport interface ViewProps {\n  items: ViewItem[];\n  activeKey?: string;\n  defaultActiveKey?: string;\n  canAdd?: boolean;\n  loading?: boolean;\n  onAdd?: (label: string, payload?: any) => void;\n  onEdit?: (\n    key: string,\n    type: ViewItemEditType,\n    payload?: { label: string }\n  ) => void;\n  onActiveChange?: (key: string) => void;\n  t?: Function;\n}\n\nexport function View({\n  items,\n  activeKey,\n  defaultActiveKey,\n  loading = false,\n  canAdd = false,\n  onAdd,\n  onEdit,\n  onActiveChange,\n  t,\n}: ViewProps): ReactElement {\n  const translate = useMemo(() => {\n    return typeof t === \"function\" ? t : () => undefined;\n  }, [t]);\n\n  const [internalActiveKey, setInternalActiveKey] = useState<\n    string | undefined\n  >(defaultActiveKey ?? items[0]?.key);\n\n  const [createViewDialogOpen, setCreateViewDialogOpen] = useState(false);\n  const [renameViewDialogOpen, setRenameViewDialogOpen] = useState(false);\n  const [deleteViewDialogOpen, setDeleteViewDialogOpen] = useState(false);\n\n  // 根据是否传入 activeKey 来决定激活的视图\n  const effectiveActiveKey = useMemo(() => {\n    return typeof activeKey !== \"undefined\" ? activeKey : internalActiveKey;\n  }, [activeKey, internalActiveKey]);\n\n  const selectedView = useMemo(() => {\n    return items.find((item) => item.key === effectiveActiveKey);\n  }, [effectiveActiveKey, items]);\n\n  const createViewForm = useForm<ViewFormData>({\n    values: {\n      name: \"\",\n    },\n  });\n\n  const renameViewForm = useForm<ViewFormData>({\n    values: {\n      name: selectedView?.label ?? \"\",\n    },\n  });\n\n  const handleCreateView = useCallback(\n    async ({ name }: ViewFormData) => {\n      await onAdd?.(name);\n      setCreateViewDialogOpen(false);\n      createViewForm.reset();\n    },\n    [createViewForm, onAdd]\n  );\n\n  const handleRenameView = useCallback(\n    async ({ name }: ViewFormData) => {\n      if (selectedView) {\n        await onEdit?.(selectedView.key, ViewItemEditType.RENAME, {\n          label: name,\n        });\n        setRenameViewDialogOpen(false);\n        renameViewForm.reset();\n      }\n    },\n    [selectedView, onEdit, renameViewForm]\n  );\n\n  const handleDeleteView = useCallback(async () => {\n    if (selectedView) {\n      await onEdit?.(selectedView.key, ViewItemEditType.DELETE);\n      setDeleteViewDialogOpen(false);\n    }\n  }, [onEdit, selectedView]);\n\n  // 生成可操作的按钮\n  const generateActionableButton = useCallback(\n    (\n      activator: ReactElement,\n      { key, canDelete = true }: ViewItem\n    ): ReactElement => {\n      return (\n        <DropdownMenu key={key}>\n          <DropdownMenuTrigger asChild>{activator}</DropdownMenuTrigger>\n\n          <DropdownMenuContent>\n            <DropdownMenuItem\n              onClick={() => {\n                setRenameViewDialogOpen(true);\n              }}\n            >\n              {translate(\"turboost_ui.view.rename_view\") ?? \"Rename\"}\n            </DropdownMenuItem>\n\n            {canDelete && (\n              <DropdownMenuItem\n                onClick={() => {\n                  setDeleteViewDialogOpen(true);\n                }}\n              >\n                {translate(\"turboost_ui.view.delete_view\") ?? \"Delete\"}\n              </DropdownMenuItem>\n            )}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      );\n    },\n    [setDeleteViewDialogOpen, setRenameViewDialogOpen, translate]\n  );\n\n  return (\n    <div className=\"flex items-center gap-1\">\n      {items.map((item, index) => {\n        const { key, label, canEdit = true } = item;\n\n        const button = (\n          <Button\n            key={`${key}-${index}`}\n            size=\"sm\"\n            variant={effectiveActiveKey === key ? \"secondary\" : \"ghost\"}\n            onClick={() => {\n              if (effectiveActiveKey !== key) {\n                if (typeof activeKey === \"undefined\") {\n                  setInternalActiveKey(key);\n                }\n\n                onActiveChange?.(key);\n              }\n            }}\n          >\n            <div className=\"flex items-center gap-1\">\n              {label}\n\n              {effectiveActiveKey === key && canEdit && (\n                <ChevronDownIcon className=\"h-3.5 w-3.5\" />\n              )}\n            </div>\n          </Button>\n        );\n\n        return effectiveActiveKey === key && canEdit\n          ? generateActionableButton(button, item)\n          : button;\n      })}\n\n      {/* 创建视图 */}\n      {canAdd && (\n        <Dialog\n          open={createViewDialogOpen}\n          onOpenChange={setCreateViewDialogOpen}\n        >\n          <DialogTrigger asChild>\n            <Button variant=\"ghost\" size=\"sm\">\n              <PlusIcon />\n            </Button>\n          </DialogTrigger>\n\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {translate(\"turboost_ui.view.create_view_dialog.title\") ??\n                  \"Create View\"}\n              </DialogTitle>\n            </DialogHeader>\n\n            <Form {...createViewForm}>\n              <form\n                className=\"space-y-4\"\n                onSubmit={createViewForm.handleSubmit(handleCreateView)}\n              >\n                <FormField\n                  name=\"name\"\n                  rules={{\n                    required:\n                      translate(\n                        \"turboost_ui.view.create_view_dialog.form.name_field.rule.required\"\n                      ) ?? \"Name is required\",\n                  }}\n                  control={createViewForm.control}\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        {translate(\n                          \"turboost_ui.view.create_view_dialog.form.name_field.label\"\n                        ) ?? \"Name\"}\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder={\n                            translate(\n                              \"turboost_ui.view.create_view_dialog.form.name_field.placeholder\"\n                            ) ?? \"Please enter view name\"\n                          }\n                          maxLength={40}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <DialogFooter>\n                  <Button type=\"submit\" disabled={loading}>\n                    {loading ? (\n                      <Loader2 className=\"animate-spin\" />\n                    ) : (\n                      translate(\n                        \"turboost_ui.view.create_view_dialog.form.submit_btn.content\"\n                      ) ?? \"Save\"\n                    )}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* 编辑视图 */}\n      <Dialog\n        open={renameViewDialogOpen}\n        onOpenChange={setRenameViewDialogOpen}\n      >\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {translate(\"turboost_ui.view.rename_view_dialog.title\") ??\n                \"Rename View\"}\n            </DialogTitle>\n          </DialogHeader>\n\n          <Form {...renameViewForm}>\n            <form\n              className=\"space-y-4\"\n              onSubmit={renameViewForm.handleSubmit(handleRenameView)}\n            >\n              <FormField\n                name=\"name\"\n                rules={{\n                  required:\n                    translate(\n                      \"turboost_ui.view.rename_view_dialog.form.name_field.rule.required\"\n                    ) ?? \"Name is required\",\n                }}\n                control={renameViewForm.control}\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      {translate(\n                        \"turboost_ui.view.rename_view_dialog.form.name_field.label\"\n                      ) ?? \"Name\"}\n                    </FormLabel>\n                    <FormControl>\n                      <Input {...field} maxLength={40} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <DialogFooter>\n                <Button type=\"submit\" disabled={loading}>\n                  {loading ? (\n                    <Loader2 className=\"animate-spin\" />\n                  ) : (\n                    translate(\n                      \"turboost_ui.view.rename_view_dialog.form.submit_btn.content\"\n                    ) ?? \"Save\"\n                  )}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* 删除视图 */}\n      <Dialog\n        open={deleteViewDialogOpen}\n        onOpenChange={setDeleteViewDialogOpen}\n      >\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {translate(\"turboost_ui.view.delete_view_dialog.title\") ??\n                \"Delete View\"}\n            </DialogTitle>\n          </DialogHeader>\n\n          <DialogDescription>\n            {translate(\"turboost_ui.view.delete_view_dialog.description\", {\n              viewName: selectedView?.label,\n            }) ??\n              `Are you sure you want to delete the view \"${selectedView?.label}\"?`}\n          </DialogDescription>\n\n          <DialogFooter>\n            <Button\n              variant=\"destructive\"\n              disabled={loading}\n              onClick={handleDeleteView}\n            >\n              {loading ? (\n                <Loader2 className=\"animate-spin\" />\n              ) : (\n                translate(\n                  \"turboost_ui.view.delete_view_dialog.delete_btn.content\"\n                ) ?? \"Delete\"\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/turboost-ui/view/view.tsx"
    },
    {
      "path": "registry/new-york/blocks/empty-state/empty-state.tsx",
      "content": "import { FileText } from \"lucide-react\";\nimport { type FC, type ReactNode } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface EmptyStateProps {\n  icon?: ReactNode;\n  title?: string;\n  description?: string;\n  className?: string;\n}\n\nexport const EmptyState: FC<EmptyStateProps> = ({\n  icon = <FileText className=\"size-8\" />,\n  title,\n  description,\n  className,\n}) => {\n  return (\n    <div className={cn(\"flex flex-col items-center justify-center\", className)}>\n      <div className=\"text-muted-foreground mx-auto\">{icon}</div>\n\n      {typeof title !== \"undefined\" && (\n        <h3 className=\"text-muted-foreground mt-2 text-sm font-semibold\">\n          {title}\n        </h3>\n      )}\n\n      {typeof description !== \"undefined\" && (\n        <p className=\"mt-1 text-sm\">{description}</p>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/turboost-ui/empty-state/empty-state.tsx"
    },
    {
      "path": "registry/new-york/blocks/input/input.tsx",
      "content": "\"use client\";\n\nimport { forwardRef, ReactNode } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface InputProps\n  extends Omit<React.ComponentProps<\"input\">, \"prefix\" | \"suffix\"> {\n  prefix?: ReactNode;\n  suffix?: ReactNode;\n}\n\nexport const Input = forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, prefix, suffix, ...props }: InputProps, ref) => {\n    const hasPrefix = !!prefix;\n    const hasSuffix = !!suffix;\n\n    return (\n      <div\n        className={cn(\n          \"relative flex w-full items-center\",\n          props.disabled && \"cursor-not-allowed\",\n          className\n        )}\n      >\n        {hasPrefix && (\n          <span className=\"text-muted-foreground pointer-events-none absolute left-0 z-10 flex h-full items-center px-2\">\n            {prefix}\n          </span>\n        )}\n\n        <input\n          ref={ref}\n          type={type}\n          data-slot=\"input\"\n          className={cn(\n            \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n            \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n            \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n            hasPrefix ? \"pl-7\" : \"pl-2\",\n            hasSuffix ? \"pr-6\" : \"pr-2\"\n          )}\n          {...props}\n        />\n\n        {hasSuffix && (\n          <span className=\"text-muted-foreground pointer-events-none absolute right-0 z-10 flex h-full items-center px-2\">\n            {suffix}\n          </span>\n        )}\n      </div>\n    );\n  }\n);\n\nInput.displayName = \"Input\";\n",
      "type": "registry:component",
      "target": "components/turboost-ui/input/input.tsx"
    },
    {
      "path": "registry/new-york/blocks/index-table/order-direction-list.tsx",
      "content": "import { ArrowDown, ArrowUp } from \"lucide-react\";\nimport { type FC, useMemo, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nimport { Button } from \"@/registry/new-york/ui/button\";\n\nimport { OrderDirection } from \"@/registry/new-york/blocks/index-table/types/order-direction\";\n\nexport interface OrderDirectionListProps {\n  className?: string;\n  value?: OrderDirection;\n  onChange?: (value: OrderDirection) => void;\n  t?: Function;\n}\n\nexport const OrderDirectionList: FC<OrderDirectionListProps> = ({\n  className,\n  value,\n  onChange,\n  t,\n}) => {\n  const translate = useMemo(() => {\n    return typeof t === \"function\" ? t : () => undefined;\n  }, [t]);\n\n  const [options] = useState([\n    {\n      label: translate(\n        \"turboost_ui.index_table.order_direction_list.sort_option.oldest_first\"\n      ),\n      value: OrderDirection.ASC,\n    },\n    {\n      label: translate(\n        \"turboost_ui.index_table.order_direction_list.sort_option.newest_first\"\n      ),\n      value: OrderDirection.DESC,\n    },\n  ]);\n\n  return (\n    <div className={cn(\"flex flex-col gap-1 pt-1\", className)}>\n      {options.map((option) => {\n        return (\n          <Button\n            className={cn(\n              \"justify-start\",\n              option.value === value ? \"text-primary bg-accent\" : undefined\n            )}\n            key={option.value}\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => onChange?.(option.value)}\n          >\n            {option.value === OrderDirection.ASC ? <ArrowUp /> : <ArrowDown />}{\" \"}\n            {option.label}\n          </Button>\n        );\n      })}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/turboost-ui/index-table/order-direction-list.tsx"
    },
    {
      "path": "registry/new-york/blocks/index-table/index-table.tsx",
      "content": "\"use client\";\n\nimport {\n  difference,\n  isEmpty,\n  isEqual,\n  isNil,\n  keys,\n  omit,\n  omitBy,\n  pick,\n  zipObject,\n} from \"lodash\";\nimport {\n  ArrowDownUp,\n  ChevronLeft,\n  ChevronRight,\n  ListFilter,\n  Loader2,\n  Search,\n} from \"lucide-react\";\nimport {\n  parseAsArrayOf,\n  parseAsBoolean,\n  parseAsInteger,\n  parseAsIsoDateTime,\n  parseAsString,\n  type ParserBuilder,\n  useQueryStates,\n} from \"nuqs\";\nimport {\n  type ReactElement,\n  type ReactNode,\n  type RefObject,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport {\n  Filter,\n  type FilterItemProps,\n  type FilterSearchConfig,\n  FilterTypeValue,\n} from \"@/registry/new-york/blocks/filter/filter\";\nimport {\n  Table,\n  type TableActionType,\n  type TableColumnProps,\n  type TableProps,\n} from \"@/registry/new-york/blocks/table/table\";\nimport { View, ViewProps } from \"@/registry/new-york/blocks/view/view\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Label } from \"@/registry/new-york/ui/label\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/registry/new-york/ui/popover\";\nimport { RadioGroup, RadioGroupItem } from \"@/registry/new-york/ui/radio-group\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/registry/new-york/ui/tooltip\";\n\nimport {\n  EmptyState,\n  EmptyStateProps,\n} from \"@/registry/new-york/blocks/empty-state/empty-state\";\nimport { Field } from \"@/registry/new-york/types/field\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/registry/new-york/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport { Input } from \"@/registry/new-york/blocks/input/input\";\nimport { OrderDirectionList } from \"@/registry/new-york/blocks/index-table/order-direction-list\";\nimport {\n  type IndexTableEdge,\n  type IndexTablePageInfo,\n  type IndexTablePagination,\n  type IndexTableValue,\n} from \"@/registry/new-york/blocks/index-table/types/index-table-a\";\nimport { OrderDirection } from \"@/registry/new-york/blocks/index-table/types/order-direction\";\nimport { buildGraphqlQueryFromFilterValues } from \"@/registry/new-york/blocks/index-table/utils/build-graphql-query-from-filter-values\";\nimport { cn } from \"@/lib/utils\";\n\nconst getFilterFiledTypeParse = (\n  type: FilterTypeValue,\n  itemType?: FilterTypeValue\n): ParserBuilder<any> => {\n  switch (type) {\n    case String:\n      return parseAsString;\n    case Number:\n      return parseAsInteger;\n    case Boolean:\n      return parseAsBoolean;\n    case Date:\n      return parseAsIsoDateTime;\n    case Array:\n      return parseAsArrayOf(\n        typeof itemType === \"undefined\"\n          ? parseAsString\n          : itemType === Date\n          ? (parseAsIsoDateTime as unknown as ParserBuilder<string>)\n          : getFilterFiledTypeParse(itemType)\n      );\n    default:\n      return parseAsString;\n  }\n};\n\nexport interface SaveViewConfig {\n  filters?: Record<string, any>;\n  query?: string;\n}\n\nexport interface ActionType {\n  reloadAndRest: () => void;\n  setFilterValues: (\n    filterValues: Record<string, any>,\n    syncToUrl?: boolean\n  ) => void;\n}\n\nexport interface ViewFormData {\n  name: string;\n}\n\nexport interface IndexTableProps<Node, OrderField> {\n  emptyStateIcon?: EmptyStateProps[\"icon\"];\n  emptyStateTitle?: EmptyStateProps[\"title\"];\n  rowSelection?: {\n    single?: boolean;\n    allowSelectAll?: boolean;\n    onSelectionChange?: (rows: Node[]) => void;\n    bulkActions?: (\n      rows: Node[],\n      isSelectedAll: boolean\n    ) => React.ComponentProps<\"button\">[];\n  };\n  bodyHeight?: {\n    max?: number;\n    min?: number;\n  };\n  emptyStateDescription?: EmptyStateProps[\"description\"];\n  actionRef?: RefObject<ActionType | null>;\n  edges?: Array<IndexTableEdge<Node>>;\n  filters?: Array<FilterItemProps<Node>>;\n  search?: false | FilterSearchConfig;\n  footer?: ReactNode;\n  orderOptions?: {\n    name: string;\n    value: OrderField;\n  }[];\n  columns: Array<TableColumnProps<Node>>;\n  pageSize?: number;\n  pageInfo?: IndexTablePageInfo;\n  loading?: boolean;\n  value?: IndexTableValue<OrderField>;\n  defaultFilterValue?: Record<Field<Node>, any>;\n  viewConfig?: ViewProps & {\n    onSave?: (viewKey: string, config: SaveViewConfig) => void;\n  };\n  toolBarRender?: () => ReactNode;\n  onChange?: (value: IndexTableValue<OrderField>) => void;\n  onRow?: TableProps<Node>[\"onRow\"];\n  t?: Function;\n}\n\nexport function IndexTable<Node, OrderField extends string>({\n  emptyStateIcon,\n  emptyStateTitle,\n  actionRef,\n  emptyStateDescription,\n  defaultFilterValue,\n  footer,\n  filters = [],\n  columns = [],\n  search,\n  bodyHeight,\n  edges,\n  orderOptions,\n  pageSize = 10,\n  pageInfo,\n  loading = false,\n  value = {},\n  rowSelection,\n  viewConfig,\n  toolBarRender,\n  onChange,\n  onRow,\n  t,\n}: IndexTableProps<Node, OrderField>): ReactElement {\n  const translate = useMemo(() => {\n    return typeof t === \"function\" ? t : () => undefined;\n  }, [t]);\n\n  // 是否显示创建新视图的对话框\n  const [showCreateViewDialog, setShowCreateViewDialog] = useState(false);\n  // 创建新视图的表单\n  const createViewForm = useForm<ViewFormData>({\n    values: {\n      name: \"\",\n    },\n  });\n\n  // 在视图模式下，是否显示过滤组件\n  const [showFilterComponent, setShowFilterComponent] = useState(false);\n\n  // 当前进行过滤操作时选中的视图 key\n  const currentSelectedViewKeyRef = useRef<string | undefined>(undefined);\n\n  const [filterValues, setFilterValues] = useState<\n    Record<Field<Node>, any> | undefined\n  >(defaultFilterValue);\n\n  const query = useMemo(() => {\n    return buildGraphqlQueryFromFilterValues(filters, filterValues);\n  }, [filterValues, filters]);\n\n  const [pagination, setPagination] = useState<IndexTablePagination>(\n    pick(value, [\"first\", \"after\", \"last\", \"before\"])\n  );\n\n  const [orderField, setOrderField] = useState(value?.orderBy?.field);\n  const [orderDirection, setOrderDirection] = useState(\n    value?.orderBy?.direction\n  );\n\n  // 是否启用视图\n  const enabledView = useMemo(\n    () => Boolean(viewConfig?.items?.length),\n    [viewConfig]\n  );\n\n  const [urlQueryStates, setUrlQueryStates] = useQueryStates(\n    {\n      query: parseAsString,\n      selectedView: parseAsString,\n      ...filters.reduce<Record<string, ParserBuilder<any>>>(\n        (result, currentFilter) => {\n          result[currentFilter.field] =\n            typeof currentFilter?.type === \"undefined\"\n              ? parseAsString\n              : getFilterFiledTypeParse(\n                  currentFilter.type,\n                  currentFilter.itemType\n                );\n\n          return result;\n        },\n        {}\n      ),\n    },\n    { history: \"push\" }\n  );\n\n  // nuqs 包对监听的属性值默认设置为 null（无论是否存在于 url 上），所以需要过滤掉 null 和 undefined 的 url 查询参数，供过滤组件使用\n  const usefulQueryStates = useMemo(() => {\n    return omitBy(urlQueryStates, isNil);\n  }, [urlQueryStates]);\n\n  // 处理 url 参数\n  const transformedParams = useMemo(() => {\n    // 如果启用视图，并且 url 不存在 selectedView 参数，则将 url 参数转换为对应的类型\n    if (enabledView && typeof usefulQueryStates?.selectedView === \"undefined\") {\n      return usefulQueryStates;\n    }\n\n    return filterValues;\n  }, [enabledView, usefulQueryStates, filterValues]);\n\n  const tableActionRef = useRef<TableActionType>(null);\n\n  // 一些可以手动触发的特殊操作\n  useImperativeHandle(\n    actionRef,\n    () => ({\n      reloadAndRest: () => {\n        setPagination({});\n      },\n      setFilterValues: async (\n        filterValues: Record<Field<Node>, any>,\n        syncToUrl = false\n      ) => {\n        if (syncToUrl) {\n          const needClearFields = difference(\n            keys(transformedParams),\n            keys(filterValues)\n          );\n\n          await setUrlQueryStates({\n            ...filterValues,\n            ...zipObject(\n              needClearFields,\n              Array(needClearFields.length).fill(null)\n            ),\n            selectedView: null,\n          });\n        } else {\n          setFilterValues(filterValues);\n        }\n      },\n    }),\n    [setUrlQueryStates, transformedParams]\n  );\n\n  const handlePrevClick = useCallback(() => {\n    setPagination({ last: pageSize, before: pageInfo?.startCursor });\n  }, [pageSize, pageInfo?.startCursor]);\n\n  const handleNextClick = useCallback(() => {\n    setPagination({ first: pageSize, after: pageInfo?.endCursor });\n  }, [pageSize, pageInfo?.endCursor]);\n\n  const handleCreateView = useCallback(\n    async ({ name }: ViewFormData) => {\n      const config: SaveViewConfig = {};\n\n      const omitQueryFilters = omit(filterValues, \"query\");\n\n      if (typeof (filterValues as Record<string, any>)?.query !== \"undefined\") {\n        config.query = (filterValues as Record<string, any>).query;\n      }\n\n      if (\n        typeof omitQueryFilters !== \"undefined\" &&\n        !isEmpty(omitQueryFilters)\n      ) {\n        config.filters = omitQueryFilters;\n      }\n\n      await viewConfig?.onAdd?.(name, config);\n\n      createViewForm.reset();\n\n      setShowFilterComponent(false);\n      setShowCreateViewDialog(false);\n      currentSelectedViewKeyRef.current = undefined;\n    },\n    [createViewForm, filterValues, viewConfig]\n  );\n\n  // 处理视图保存\n  const handleViewSave = useCallback(async () => {\n    const config: SaveViewConfig = {};\n\n    const omitQueryFilters = omit(filterValues, \"query\");\n\n    if (typeof (filterValues as Record<string, any>)?.query !== \"undefined\") {\n      config.query = (filterValues as Record<string, any>).query;\n    }\n\n    if (typeof omitQueryFilters !== \"undefined\" && !isEmpty(omitQueryFilters)) {\n      config.filters = omitQueryFilters;\n    }\n\n    if (typeof currentSelectedViewKeyRef.current !== \"undefined\") {\n      if (\n        typeof viewConfig !== \"undefined\" &&\n        typeof viewConfig.items.find(\n          (item) =>\n            item.key === currentSelectedViewKeyRef.current &&\n            item.canEdit !== false\n        ) !== \"undefined\"\n      ) {\n        await viewConfig?.onSave?.(currentSelectedViewKeyRef.current, config);\n\n        currentSelectedViewKeyRef.current = undefined;\n      } else {\n        setShowCreateViewDialog(true);\n      }\n    } else {\n      setShowCreateViewDialog(true);\n    }\n  }, [filterValues, viewConfig]);\n\n  // 当启用视图并且 searchParams 发生变化的时候，更新 filterValues\n  useEffect(() => {\n    if (!isEqual(transformedParams, filterValues)) {\n      setFilterValues(transformedParams as any);\n      setPagination({});\n    }\n  }, [filterValues, transformedParams]);\n\n  // 如果 url 不存在 selectedView 参数，则根据过滤项和查询条件来决定是否显示过滤组件\n  useEffect(() => {\n    if (enabledView && typeof usefulQueryStates?.selectedView === \"undefined\") {\n      if (\n        filters.some(\n          (item) => typeof usefulQueryStates?.[item.field] !== \"undefined\"\n        ) ||\n        typeof usefulQueryStates?.query !== \"undefined\"\n      ) {\n        if (!showFilterComponent) {\n          setShowFilterComponent(true);\n        }\n      } else {\n        // 没有符合的过滤项，则将视图参数设置为第一个视图\n        const params = new URLSearchParams(window.location.search);\n\n        const needClearFields = Array.from(params.keys());\n\n        const url = new URL(window.location.href);\n\n        needClearFields.forEach((key) => {\n          url.searchParams.delete(key);\n        });\n\n        url.searchParams.set(\"selectedView\", viewConfig!.items[0].key);\n\n        window.history.pushState(null, \"\", url.toString());\n      }\n    }\n  }, [\n    enabledView,\n    filters,\n    showFilterComponent,\n    usefulQueryStates,\n    viewConfig,\n  ]);\n\n  // 当视图参数存在，但是视图参数不包含在配置项里面时，则将视图参数设置为第一个视图\n  useEffect(() => {\n    if (enabledView && typeof usefulQueryStates?.selectedView !== \"undefined\") {\n      if (\n        typeof viewConfig !== \"undefined\" &&\n        !viewConfig.items.some(\n          (item) => item.key === usefulQueryStates.selectedView\n        )\n      ) {\n        // 没有符合的过滤项，则将视图参数设置为第一个视图\n        const params = new URLSearchParams(window.location.search);\n\n        const needClearFields = Array.from(params.keys());\n\n        const url = new URL(window.location.href);\n\n        needClearFields.forEach((key) => {\n          url.searchParams.delete(key);\n        });\n\n        url.searchParams.set(\"selectedView\", viewConfig!.items[0].key);\n\n        window.history.pushState(null, \"\", url.toString());\n      } else if (typeof currentSelectedViewKeyRef.current === \"undefined\") {\n        setShowFilterComponent(false);\n      }\n    }\n  }, [enabledView, viewConfig, usefulQueryStates]);\n\n  useEffect(() => {\n    onChange?.({\n      query,\n      ...(Object.keys(pagination).length > 0\n        ? pagination\n        : { first: pageSize }),\n      ...(typeof orderField !== \"undefined\"\n        ? {\n            orderBy: {\n              field: orderField,\n              direction: orderDirection ?? OrderDirection.ASC,\n            },\n          }\n        : {}),\n    });\n\n    tableActionRef.current?.resetRowSelection?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [query, pagination, pageSize, orderField, orderDirection, tableActionRef]);\n\n  return (\n    <div className=\"rounded-md shadow last-of-type:rounded-lg\">\n      <div\n        className={cn(\n          !!(filters.length || search) && \"border-b border-gray-200\"\n        )}\n      >\n        {typeof toolBarRender !== \"undefined\" && toolBarRender()}\n\n        <div className=\"flex items-center p-2\">\n          {enabledView && !showFilterComponent && (\n            <div className=\"mr-2 flex-1 overflow-x-auto\">\n              <View {...viewConfig!} t={t} />\n            </div>\n          )}\n\n          <Filter<Node>\n            t={t}\n            extra={\n              <>\n                {enabledView ? (\n                  showFilterComponent ? (\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => {\n                          if (\n                            (typeof currentSelectedViewKeyRef.current ===\n                              \"undefined\" &&\n                              typeof usefulQueryStates?.selectedView ===\n                                \"undefined\") ||\n                            currentSelectedViewKeyRef.current !==\n                              usefulQueryStates?.selectedView\n                          ) {\n                            // 没有符合的过滤项，则将视图参数设置为第一个视图\n                            const params = new URLSearchParams(\n                              window.location.search\n                            );\n\n                            const needClearFields = Array.from(params.keys());\n\n                            const url = new URL(window.location.href);\n\n                            needClearFields.forEach((key) => {\n                              url.searchParams.delete(key);\n                            });\n\n                            url.searchParams.set(\n                              \"selectedView\",\n                              typeof currentSelectedViewKeyRef.current !==\n                                \"undefined\"\n                                ? currentSelectedViewKeyRef.current\n                                : viewConfig!.items[0].key\n                            );\n\n                            window.history.pushState(null, \"\", url.toString());\n\n                            setShowFilterComponent(false);\n                            currentSelectedViewKeyRef.current = undefined;\n                          } else {\n                            setFilterValues(\n                              typeof filterValues === \"undefined\"\n                                ? undefined\n                                : { ...filterValues }\n                            );\n                            setShowFilterComponent(false);\n                            currentSelectedViewKeyRef.current = undefined;\n                          }\n                        }}\n                      >\n                        {translate(\"turboost_ui.index_table.view.cancel\") ??\n                          \"Cancel\"}\n                      </Button>\n                      <Button\n                        disabled={\n                          typeof usefulQueryStates?.selectedView !== \"undefined\"\n                        }\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={handleViewSave}\n                      >\n                        {viewConfig?.loading ? (\n                          <Loader2 className=\"animate-spin\" />\n                        ) : (\n                          translate(\"turboost_ui.index_table.view.save\") ??\n                          \"Save\"\n                        )}\n                      </Button>\n                    </div>\n                  ) : (\n                    <Tooltip>\n                      <TooltipTrigger asChild>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => {\n                            setShowFilterComponent(true);\n                            currentSelectedViewKeyRef.current =\n                              urlQueryStates?.selectedView ?? undefined;\n                          }}\n                        >\n                          <Search />\n                          <ListFilter />\n                        </Button>\n                      </TooltipTrigger>\n\n                      <TooltipContent>\n                        {translate(\n                          \"turboost_ui.index_table.view.search_and_filter\"\n                        ) ?? \"Search and Filter\"}\n                      </TooltipContent>\n                    </Tooltip>\n                  )\n                ) : undefined}\n\n                {typeof orderOptions !== \"undefined\" &&\n                orderOptions.length > 0 ? (\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <div>\n                        <Tooltip>\n                          <TooltipTrigger asChild>\n                            <Button size=\"sm\" variant=\"ghost\">\n                              <ArrowDownUp />\n                            </Button>\n                          </TooltipTrigger>\n\n                          <TooltipContent>\n                            {translate(\"turboost_ui.index_table.sort\") ??\n                              \"Sort\"}\n                          </TooltipContent>\n                        </Tooltip>\n                      </div>\n                    </PopoverTrigger>\n\n                    <PopoverContent className=\"w-fit divide-y p-2 text-left\">\n                      <RadioGroup\n                        className=\"pb-2\"\n                        value={orderField}\n                        onValueChange={(value) => {\n                          setPagination({});\n                          setOrderField(value as OrderField);\n                        }}\n                      >\n                        {orderOptions.map(({ name, value }) => (\n                          <div className=\"flex items-center gap-2\" key={value}>\n                            <RadioGroupItem\n                              key={name}\n                              id={name}\n                              value={value as OrderField}\n                            />\n                            <Label htmlFor={name}>{name}</Label>\n                          </div>\n                        ))}\n                      </RadioGroup>\n\n                      <OrderDirectionList\n                        value={orderDirection}\n                        onChange={(value) => {\n                          setPagination({});\n                          setOrderDirection(value);\n                        }}\n                      />\n                    </PopoverContent>\n                  </Popover>\n                ) : undefined}\n              </>\n            }\n            filters={filters}\n            loading={loading}\n            search={\n              !enabledView || (enabledView && showFilterComponent)\n                ? search\n                : false\n            }\n            showFilterItems={\n              !enabledView || (enabledView && showFilterComponent)\n            }\n            values={filterValues}\n            onChange={(result) => {\n              // 根据是否开启视图来决定如何更新过滤项\n              if (enabledView) {\n                if (!isEqual(result, transformedParams)) {\n                  const needClearFields = difference(\n                    keys(transformedParams),\n                    keys(result)\n                  );\n\n                  setUrlQueryStates(\n                    isEmpty(result)\n                      ? {\n                          ...zipObject(\n                            needClearFields,\n                            Array(needClearFields.length).fill(null)\n                          ),\n                          selectedView:\n                            typeof currentSelectedViewKeyRef.current !==\n                            \"undefined\"\n                              ? currentSelectedViewKeyRef.current\n                              : viewConfig!.items[0].key,\n                        }\n                      : {\n                          ...result,\n                          ...zipObject(\n                            needClearFields,\n                            Array(needClearFields.length).fill(null)\n                          ),\n                          selectedView: null,\n                        }\n                  );\n                }\n              } else {\n                setFilterValues(result);\n                setPagination({});\n              }\n            }}\n          />\n        </div>\n      </div>\n\n      <div\n        className={cn(\"relative min-h-20\", loading && \"pointer-events-none\")}\n      >\n        {typeof edges !== \"undefined\" && edges.length > 0 ? (\n          <Table\n            bodyHeight={bodyHeight}\n            columns={columns}\n            data={edges.map((edge) => edge.node)}\n            rowSelection={rowSelection}\n            tableActionRef={tableActionRef}\n            onRow={onRow}\n          />\n        ) : !loading ? (\n          <EmptyState\n            className=\"py-10\"\n            description={emptyStateDescription}\n            icon={emptyStateIcon}\n            title={emptyStateTitle}\n          />\n        ) : undefined}\n\n        {/* 当获取新数据的时候，加载状态可以覆盖在老数据上面 */}\n        {loading && (\n          <>\n            <div className=\"bg-surface absolute top-0 left-0 z-[2] h-full w-full opacity-50\" />\n            <Loader2 className=\"absolute top-0 right-0 bottom-0 left-0 z-10 m-auto animate-spin\" />\n          </>\n        )}\n      </div>\n\n      {footer !== undefined && <div>{footer}</div>}\n\n      {(pageInfo?.hasPreviousPage === true ||\n        pageInfo?.hasNextPage === true) && (\n        <div className=\"flex justify-center gap-2 border-t p-2\">\n          <Button\n            disabled={!pageInfo?.hasPreviousPage || loading}\n            variant=\"ghost\"\n            onClick={handlePrevClick}\n          >\n            <ChevronLeft />\n          </Button>\n\n          <Button\n            disabled={!pageInfo?.hasNextPage || loading}\n            variant=\"ghost\"\n            onClick={handleNextClick}\n          >\n            <ChevronRight />\n          </Button>\n        </div>\n      )}\n\n      <Dialog\n        open={showCreateViewDialog}\n        onOpenChange={setShowCreateViewDialog}\n      >\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {translate(\"turboost_ui.index_table.view.create_dialog.title\") ??\n                \"Create View\"}\n            </DialogTitle>\n          </DialogHeader>\n\n          <Form {...createViewForm}>\n            <form\n              className=\"space-y-4\"\n              onSubmit={createViewForm.handleSubmit(handleCreateView)}\n            >\n              <FormField\n                name=\"name\"\n                rules={{\n                  required:\n                    translate(\n                      \"turboost_ui.index_table.view.create_dialog.form.name_field.rule.required\"\n                    ) ?? \"View name is required\",\n                }}\n                control={createViewForm.control}\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      {translate(\n                        \"turboost_ui.index_table.view.create_dialog.form.name_field.label\"\n                      ) ?? \"View Name\"}\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder={\n                          translate(\n                            \"turboost_ui.index_table.view.create_dialog.form.name_field.placeholder\"\n                          ) ?? \"Please enter view name\"\n                        }\n                        maxLength={40}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <DialogFooter>\n                <Button type=\"submit\">\n                  {viewConfig?.loading ? (\n                    <Loader2 className=\"animate-spin\" />\n                  ) : (\n                    translate(\n                      \"turboost_ui.index_table.view.create_dialog.form.submit_btn.content\"\n                    ) ?? \"Save\"\n                  )}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/turboost-ui/index-table/index-table.tsx"
    }
  ]
}