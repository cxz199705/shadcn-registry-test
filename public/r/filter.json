{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "filter",
  "type": "registry:component",
  "title": "Filter",
  "description": "A filter component",
  "dependencies": [
    "lucide-react",
    "dayjs",
    "lodash",
    "react-hook-form"
  ],
  "registryDependencies": [
    "badge",
    "dropdown-menu",
    "popover"
  ],
  "files": [
    {
      "path": "registry/new-york/types/field.type.ts",
      "content": "type Prev = [never, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\ntype Join<K, P> = K extends string | number\n  ? P extends string | number\n    ? `${K}${\"\" extends P ? \"\" : \".\"}${P}`\n    : never\n  : never;\n\nexport type Field<T, D extends Prev[number] = 3> = [D] extends [never]\n  ? never\n  : T extends object\n  ? {\n      [K in keyof T]-?: K extends string | number\n        ? T[K] extends Date\n          ? `${K}`\n          : Join<K, Field<T[K], Prev[D]>>\n        : never;\n    }[keyof T]\n  : \"\";\n",
      "type": "registry:file",
      "target": "components/turboost-ui/types/field.type.ts"
    },
    {
      "path": "registry/new-york/blocks/filter/utils/transform-object-by-fields.ts",
      "content": "import { FilterItemProps } from \"../filter\";\n\nexport type TypeValue =\n  | StringConstructor\n  | NumberConstructor\n  | BooleanConstructor\n  | DateConstructor\n  | ArrayConstructor;\n\nexport const transformTypeValue = (\n  value: any,\n  type?: TypeValue,\n  itemType?: TypeValue,\n): any => {\n  if (typeof type === \"undefined\") {\n    return value;\n  }\n\n  try {\n    switch (type) {\n      case String:\n        return String(value);\n      case Number:\n        return Number(value);\n      case Boolean:\n        return Boolean(value);\n      case Date:\n        return new Date(value);\n      case Array:\n        if (Array.isArray(value)) {\n          return typeof itemType !== \"undefined\"\n            ? value.map((item: any) => transformTypeValue(item, itemType))\n            : value;\n        } else if (value !== null && typeof value !== \"undefined\") {\n          return typeof itemType !== \"undefined\"\n            ? [transformTypeValue(value, itemType)]\n            : [value];\n        } else {\n          return [];\n        }\n      default:\n        return value;\n    }\n  } catch {\n    return value;\n  }\n};\n\nexport const transformObjectByFields = (\n  obj: Record<string, any>,\n  filters: FilterItemProps<any>[],\n): Record<string, any> => {\n  const result: Record<string, any> = {};\n\n  for (const key of Object.keys(obj)) {\n    const filter = filters.find((f) => f.field === key);\n\n    if (filter) {\n      result[key] = transformTypeValue(obj[key], filter.type, filter.itemType);\n    } else {\n      result[key] = obj[key];\n    }\n  }\n\n  return result;\n};\n",
      "type": "registry:file",
      "target": "components/turboost-ui/filter/utils/transform-object-by-fields.ts"
    },
    {
      "path": "registry/new-york/blocks/input/input.tsx",
      "content": "\"use client\";\n\nimport { forwardRef, ReactNode } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface InputProps\n  extends Omit<React.ComponentProps<\"input\">, \"prefix\" | \"suffix\"> {\n  prefix?: ReactNode;\n  suffix?: ReactNode;\n}\n\nexport const Input = forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, prefix, suffix, ...props }: InputProps, ref) => {\n    const hasPrefix = !!prefix;\n    const hasSuffix = !!suffix;\n\n    return (\n      <div\n        className={cn(\n          \"relative flex w-full items-center\",\n          props.disabled && \"cursor-not-allowed\",\n          className\n        )}\n      >\n        {hasPrefix && (\n          <span className=\"text-muted-foreground pointer-events-none absolute left-0 z-10 flex h-full items-center px-2\">\n            {prefix}\n          </span>\n        )}\n\n        <input\n          ref={ref}\n          type={type}\n          data-slot=\"input\"\n          className={cn(\n            \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n            \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n            \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n            hasPrefix ? \"pl-7\" : \"pl-2\",\n            hasSuffix ? \"pr-6\" : \"pr-2\"\n          )}\n          {...props}\n        />\n\n        {hasSuffix && (\n          <span className=\"text-muted-foreground pointer-events-none absolute right-0 z-10 flex h-full items-center px-2\">\n            {suffix}\n          </span>\n        )}\n      </div>\n    );\n  }\n);\n\nInput.displayName = \"Input\";\n",
      "type": "registry:component",
      "target": "components/turboost-ui/input/input.tsx"
    },
    {
      "path": "registry/new-york/blocks/filter/filter.tsx",
      "content": "import dayjs from \"dayjs\";\nimport { forEach, isPlainObject, omitBy, transform } from \"lodash\";\nimport { ChevronDown, Loader2, Plus, Search, X } from \"lucide-react\";\nimport {\n  type ReactElement,\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { cn } from \"@/lib/utils\";\nimport { type Field } from \"@/registry/new-york/types/field.type\";\nimport { Badge } from \"@/registry/new-york/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/new-york/ui/dropdown-menu\";\nimport { Input } from \"@/registry/new-york/blocks/input/input\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/registry/new-york/ui/popover\";\n\nconst isEmpty = (value: unknown): boolean => {\n  return (\n    typeof value === \"undefined\" ||\n    value === \"\" ||\n    (value instanceof Array && value.length === 0)\n  );\n};\n\nconst omitEmpty = (obj: any): any => omitBy(obj, isEmpty);\n\nconst formatRenderValue = (obj: any): any => {\n  return transform<any, any>(\n    obj,\n    (result, value, key) => {\n      if (isPlainObject(value) || Array.isArray(value)) {\n        forEach(formatRenderValue(value), (flattenedValue, flattenedKey) => {\n          if (Array.isArray(value)) {\n            if (typeof result[key] === \"undefined\") {\n              result[key] = [];\n            }\n          } else {\n            if (typeof result[key] === \"undefined\") {\n              result[key] = {};\n            }\n          }\n\n          result[key][flattenedKey] =\n            flattenedValue instanceof Date\n              ? dayjs(flattenedValue).format(\"YYYY-MM-DD\")\n              : flattenedValue;\n        });\n      } else {\n        result[key] =\n          value instanceof Date ? dayjs(value).format(\"YYYY-MM-DD\") : value;\n      }\n    },\n    {}\n  );\n};\n\nconst flattenObject = (obj: any): any => {\n  return transform<any, any>(\n    obj,\n    (result, value, key) => {\n      if (typeof key === \"string\" && isPlainObject(value)) {\n        const nested = flattenObject(value);\n        forEach(nested, (nestedValue, nestedKey) => {\n          result[`${key}.${nestedKey}`] = nestedValue;\n        });\n      } else {\n        result[key] = value;\n      }\n    },\n    {}\n  );\n};\n\nexport type FilterTypeValue =\n  | StringConstructor\n  | NumberConstructor\n  | BooleanConstructor\n  | DateConstructor\n  | ArrayConstructor;\n\nexport interface FilterItemProps<T> {\n  label: string;\n  field: Field<T>;\n  render: ({\n    field: { value, onChange },\n  }: {\n    field: {\n      value: any;\n      onChange: (value: any) => void;\n    };\n  }) => ReactElement;\n  renderValue?: (options: {\n    label: string;\n    field: Field<T>;\n    value: any;\n  }) => ReactNode;\n  pinned?: boolean;\n  type?: FilterTypeValue;\n  itemType?: FilterTypeValue;\n}\n\nexport interface FilterSearchConfig {\n  querySuffix?: ReactNode;\n  queryPrefix?: ReactNode;\n  queryPlaceholder?: string;\n  disabled?: boolean;\n}\n\nexport interface FilterProps<T> {\n  className?: string;\n  loading?: boolean;\n  filters?: Array<FilterItemProps<T>>;\n  extra?: ReactNode;\n  search?: false | FilterSearchConfig;\n  showFilterItems?: boolean;\n  values?: Record<Field<T>, any> & { query?: string };\n  onChange?: (value: Record<Field<T>, any> & { query?: string }) => void;\n  t?: Function;\n}\n\nexport function Filter<T>({\n  className,\n  loading = false,\n  filters = [],\n  extra,\n  search,\n  showFilterItems = true,\n  values,\n  onChange,\n  t,\n}: FilterProps<T>): ReactElement {\n  const translate = useMemo(() => {\n    return typeof t === \"function\" ? t : () => undefined;\n  }, [t]);\n\n  const { control, setValue, watch, reset } = useForm<any>();\n\n  // 将筛选条件分组为固定和非固定两类\n  const [{ fixedFilters, unfixedFilters }, setFilterGroups] = useState({\n    fixedFilters: filters.filter((item) => item.pinned),\n    unfixedFilters: filters.filter((item) => item.pinned !== true),\n  });\n\n  const handleChange = useCallback(() => {\n    onChange?.(omitEmpty(flattenObject(watch())));\n  }, [onChange, watch]);\n\n  // 设置筛选条件固定状态\n  const setFilterFieldPinnedStatus = useCallback(\n    (field: Field<T>, pinned: boolean) => {\n      setFilterGroups((prev) => {\n        return {\n          ...prev,\n          fixedFilters: pinned\n            ? [\n                ...prev.fixedFilters,\n                ...prev.unfixedFilters\n                  .filter((item) => item.field === field)\n                  .map((item) => ({ ...item, pinned })),\n              ]\n            : prev.fixedFilters.filter((item) => item.field !== field),\n          unfixedFilters: pinned\n            ? prev.unfixedFilters.filter((item) => item.field !== field)\n            : [\n                ...prev.unfixedFilters,\n                ...prev.fixedFilters\n                  .filter((item) => item.field === field)\n                  .map((item) => ({ ...item, pinned })),\n              ],\n        };\n      });\n    },\n    []\n  );\n\n  useEffect(() => {\n    // 获取当前表单中所有字段的值\n    const currentFormValues = watch();\n    // 准备新的表单值\n    const newFormValues = { ...currentFormValues };\n\n    // 将所有在 watch() 中但不在 values 中的字段设置为 undefined\n    Object.keys(currentFormValues).forEach((key) => {\n      if (\n        typeof values !== \"undefined\" &&\n        !Object.prototype.hasOwnProperty.call(values, key)\n      ) {\n        newFormValues[key] = undefined;\n      }\n    });\n\n    // 将 values 中的值应用到表单\n    if (typeof values !== \"undefined\") {\n      Object.keys(values).forEach((key) => {\n        newFormValues[key as keyof typeof values] =\n          values[key as keyof typeof values];\n      });\n    }\n\n    // 重置表单，应用新的值\n    reset(newFormValues);\n  }, [values, watch, reset]);\n\n  return (\n    <div className={cn(\"space-y-3\", showFilterItems && \"flex-1\", className)}>\n      {!(\n        (typeof search === \"undefined\" || search === false) &&\n        typeof extra === \"undefined\"\n      ) && (\n        <div className=\"flex items-center gap-2\">\n          {typeof search !== \"undefined\" && search !== false && (\n            <Controller<{ query: string }>\n              control={control}\n              name=\"query\"\n              render={({ field }) => (\n                <Input\n                  disabled={field?.disabled ?? search?.disabled}\n                  placeholder={search?.queryPlaceholder}\n                  prefix={search?.queryPrefix ?? <Search className=\"size-4\" />}\n                  suffix={\n                    loading ? (\n                      <Loader2 className=\"animate-spin\" />\n                    ) : (\n                      search?.querySuffix\n                    )\n                  }\n                  value={field.value}\n                  onChange={(value) => {\n                    field.onChange(value);\n                  }}\n                  onKeyDown={(e) => {\n                    if (e.key === \"Enter\" && typeof search !== \"undefined\") {\n                      e.preventDefault();\n                      handleChange();\n                    }\n                  }}\n                />\n              )}\n            />\n          )}\n\n          {extra}\n        </div>\n      )}\n\n      {showFilterItems && filters.length > 0 && (\n        <div className=\"flex flex-wrap gap-2\">\n          {fixedFilters.map(({ field, label, render, renderValue }) => {\n            const originalFilter = filters.find((item) => item.field === field);\n            const fieldValue = watch(field);\n\n            return (\n              <Popover\n                // Dialog -> Popover -> ScrollArea 时会有滚动问题，需要加 modal={true}\n                // issue:https://github.com/shadcn-ui/ui/issues/922\n                modal={true}\n                defaultOpen={originalFilter?.pinned !== true}\n                onOpenChange={(open) => {\n                  // 关闭筛选弹窗的时候如果该筛选条件没有值，则将其移除固定项\n                  if (\n                    !open &&\n                    typeof fieldValue === \"undefined\" &&\n                    originalFilter?.pinned !== true\n                  ) {\n                    setFilterFieldPinnedStatus(field, false);\n                  }\n                }}\n                key={field}\n              >\n                <PopoverTrigger asChild className=\"whitespace-normal\">\n                  <Badge\n                    variant=\"outline\"\n                    className=\"hover:bg-accent rounded-full px-2 py-1\"\n                  >\n                    <span className=\"flex items-center gap-1\">\n                      {isEmpty(fieldValue) ? (\n                        <>\n                          <span>{label}</span>{\" \"}\n                          <ChevronDown className=\"size-4\" />\n                        </>\n                      ) : (\n                        <>\n                          <span>\n                            {`${label}: ${String(\n                              typeof renderValue !== \"undefined\"\n                                ? renderValue({\n                                    field,\n                                    label,\n                                    value: formatRenderValue({\n                                      [field]: fieldValue,\n                                    })[field],\n                                  })\n                                : formatRenderValue({ [field]: fieldValue })[\n                                    field\n                                  ]\n                            )}`}\n                          </span>\n\n                          <X\n                            className=\"size-4 shrink-0 cursor-pointer\"\n                            onClick={(event) => {\n                              event.stopPropagation();\n                              close();\n                              setValue(field, undefined as any);\n\n                              // 如果该筛选条件是非原固定筛选条件，则将其移除\n                              if (originalFilter?.pinned !== true) {\n                                setFilterFieldPinnedStatus(field, false);\n                              }\n\n                              handleChange();\n                            }}\n                          />\n                        </>\n                      )}\n                    </span>\n                  </Badge>\n                </PopoverTrigger>\n\n                <PopoverContent className=\"w-fit\">\n                  <Controller\n                    control={control}\n                    name={field}\n                    render={(renderProps) =>\n                      render({\n                        ...renderProps,\n                        field: {\n                          ...renderProps.field,\n                          onChange: (value) => {\n                            renderProps.field.onChange(value);\n                            handleChange();\n                          },\n                        },\n                      })\n                    }\n                  />\n                </PopoverContent>\n              </Popover>\n            );\n          })}\n\n          {unfixedFilters.length > 0 && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Badge\n                  variant=\"outline\"\n                  className=\"hover:bg-accent rounded-full px-2 py-1\"\n                >\n                  <span>{translate(\"turboost_ui.filters.add_filter\")}</span>\n                  <Plus className=\"size-4 shrink-0\" />\n                </Badge>\n              </DropdownMenuTrigger>\n\n              <DropdownMenuContent>\n                {unfixedFilters.map(({ field, label }) => {\n                  return (\n                    <DropdownMenuItem\n                      key={field}\n                      onClick={() => {\n                        setFilterFieldPinnedStatus(field, true);\n                      }}\n                    >\n                      <div className=\"w-full text-center text-xs font-semibold\">\n                        {label}\n                      </div>\n                    </DropdownMenuItem>\n                  );\n                })}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/turboost-ui/filter/filter.tsx"
    }
  ]
}