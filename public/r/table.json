{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "table",
  "type": "registry:component",
  "title": "Table",
  "description": "A table component",
  "dependencies": [
    "lucide-react",
    "@tanstack/react-table",
    "lodash"
  ],
  "registryDependencies": [
    "button",
    "checkbox",
    "radio-group"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/empty-state/empty-state.tsx",
      "content": "import { FileText } from \"lucide-react\";\nimport { type FC, type ReactNode } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface EmptyStateProps {\n  icon?: ReactNode;\n  title?: string;\n  description?: string;\n  className?: string;\n}\n\nexport const EmptyState: FC<EmptyStateProps> = ({\n  icon = <FileText className=\"size-8\" />,\n  title,\n  description,\n  className,\n}) => {\n  return (\n    <div className={cn(\"flex flex-col items-center justify-center\", className)}>\n      <div className=\"text-muted-foreground mx-auto\">{icon}</div>\n\n      {typeof title !== \"undefined\" && (\n        <h3 className=\"text-muted-foreground mt-2 text-sm font-semibold\">\n          {title}\n        </h3>\n      )}\n\n      {typeof description !== \"undefined\" && (\n        <p className=\"mt-1 text-sm\">{description}</p>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/turboost-ui/empty-state/empty-state.tsx"
    },
    {
      "path": "registry/new-york/blocks/table/table.tsx",
      "content": "import {\n  type AccessorKeyColumnDef,\n  type ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  type RowSelectionState,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport { cloneDeep, groupBy, reduce, sum } from \"lodash\";\nimport {\n  type ReactElement,\n  type RefObject,\n  useCallback,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nimport {\n  EmptyState,\n  type EmptyStateProps,\n} from \"@/registry/new-york/blocks/empty-state/empty-state\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Checkbox } from \"@/registry/new-york/ui/checkbox\";\nimport { RadioGroup, RadioGroupItem } from \"@/registry/new-york/ui/radio-group\";\nimport { Loader2 } from \"lucide-react\";\n\nconst columnAlignClass = {\n  left: \"text-left\",\n  center: \"text-center\",\n  right: \"text-right\",\n};\n\nconst columnWrapClass = {\n  true: \"break-words\",\n  false: \"whitespace-nowrap\",\n};\n\nexport interface TableActionType {\n  resetRowSelection: () => void;\n}\n\nexport type TableColumnProps<T> = ColumnDef<T> & {\n  align?: \"left\" | \"center\" | \"right\";\n  pin?: \"left\" | \"right\" | false;\n  wordWrap?: boolean;\n};\n\nexport interface TableProps<T> {\n  tableActionRef?: RefObject<TableActionType | null>;\n  emptyStateIcon?: EmptyStateProps[\"icon\"];\n  emptyStateTitle?: EmptyStateProps[\"title\"];\n  emptyStateDescription?: EmptyStateProps[\"description\"];\n  columns: Array<TableColumnProps<T>>;\n  rowSelection?: {\n    single?: boolean;\n    allowSelectAll?: boolean;\n    onSelectionChange?: (rows: T[]) => void;\n    bulkActions?: (\n      rows: T[],\n      isSelectedAll: boolean\n    ) => React.ComponentProps<\"button\">[];\n  };\n  data: T[];\n  bodyHeight?: {\n    max?: number;\n    min?: number;\n  };\n  loading?: boolean;\n  onRow?: (record: T) => {\n    onClick?: (e: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => void;\n  };\n  t?: Function;\n}\n\nexport function Table<T>({\n  emptyStateIcon,\n  emptyStateTitle,\n  emptyStateDescription,\n  tableActionRef,\n  columns,\n  data,\n  rowSelection,\n  loading = false,\n  bodyHeight,\n  onRow,\n  t,\n}: TableProps<T>): ReactElement {\n  const translate = useMemo(() => {\n    return typeof t === \"function\" ? t : () => undefined;\n  }, [t]);\n\n  const tableHeaderRef = useRef<HTMLTableElement>(null);\n  const tableFooterRef = useRef<HTMLTableElement>(null);\n\n  const [internalRowSelection, setInternalRowSelection] =\n    useState<RowSelectionState>({});\n\n  // 不是当前页的选中全部\n  const [isRowSelectedAll, setIsRowSelectedAll] = useState(false);\n\n  const hasBulkActions = useMemo(() => {\n    return (\n      typeof rowSelection?.bulkActions !== \"undefined\" &&\n      rowSelection.bulkActions([], false).length !== 0\n    );\n  }, [rowSelection]);\n\n  const memoColumns = useMemo(() => {\n    const cloneColumns = cloneDeep(columns);\n\n    if (typeof rowSelection !== \"undefined\") {\n      cloneColumns.unshift({\n        id: \"row-select\",\n        size: 40,\n        maxSize: 40,\n        pin: cloneColumns.some(\n          (column) =>\n            typeof column.pin !== \"undefined\" &&\n            typeof column.pin !== \"boolean\" &&\n            [\"left\", \"right\"].includes(column.pin)\n        )\n          ? \"left\"\n          : undefined,\n        header: !(rowSelection.single ?? false)\n          ? ({ table }) => {\n              return (\n                <Checkbox\n                  checked={\n                    table.getIsAllRowsSelected()\n                      ? true\n                      : Object.keys(internalRowSelection).length > 0\n                      ? \"indeterminate\"\n                      : false\n                  }\n                  onCheckedChange={(value) => {\n                    table.toggleAllRowsSelected(\n                      [false, \"indeterminate\"].includes(value) ? false : true\n                    );\n                  }}\n                />\n              );\n            }\n          : undefined,\n        cell: ({ row, table }) =>\n          typeof rowSelection.single !== \"undefined\" && rowSelection.single ? (\n            <RadioGroup\n              value={row.getIsSelected() ? row.id : undefined}\n              onValueChange={() => {\n                table.setRowSelection({ [row.id]: true });\n              }}\n              onClick={(e) => {\n                e.stopPropagation();\n              }}\n            >\n              <RadioGroupItem value={row.id} disabled={!row.getCanSelect()} />\n            </RadioGroup>\n          ) : (\n            <Checkbox\n              checked={row.getIsSelected()}\n              disabled={!row.getCanSelect()}\n              onCheckedChange={row.getToggleSelectedHandler()}\n              onClick={(e) => {\n                e.stopPropagation();\n              }}\n            />\n          ),\n      });\n    }\n\n    return cloneColumns.map((column) =>\n      typeof column.id === \"undefined\"\n        ? {\n            ...column,\n            id: (column as AccessorKeyColumnDef<T>).accessorKey,\n          }\n        : column\n    );\n  }, [columns, internalRowSelection, rowSelection]);\n\n  const table = useReactTable({\n    data,\n    columns: memoColumns as Array<ColumnDef<T>>,\n    state: {\n      rowSelection: internalRowSelection,\n      columnPinning: reduce(\n        memoColumns.filter(\n          (column) => typeof column.pin !== \"undefined\" && column.pin !== false\n        ),\n        (acc: Record<string, string[]>, column) => {\n          if (\n            (column.pin === \"left\" || column.pin === \"right\") &&\n            !acc[column.pin]\n          ) {\n            acc[column.pin] = [];\n          }\n\n          acc[column.pin as keyof typeof column.pin].push(\n            (column as AccessorKeyColumnDef<T>).id!\n          );\n\n          return acc;\n        },\n        {}\n      ),\n    },\n    enableRowSelection: typeof rowSelection !== \"undefined\",\n    getCoreRowModel: getCoreRowModel(),\n    onRowSelectionChange: (updater) => {\n      setInternalRowSelection((old) => {\n        const newRowSelection =\n          updater instanceof Function ? updater(old) : updater;\n\n        rowSelection?.onSelectionChange?.(\n          Object.keys(newRowSelection).map((key) => table.getRow(key).original)\n        );\n\n        setIsRowSelectedAll(false);\n\n        return newRowSelection;\n      });\n    },\n  });\n\n  const columnsPinnedInfo = useMemo(() => {\n    return groupBy(\n      table.getHeaderGroups().map((headerGroup) =>\n        headerGroup.headers\n          .filter((header) => header.column.getIsPinned() !== false)\n          .map((header) => ({\n            direction: header.column.getIsPinned(),\n            size: header.column.getSize(),\n          }))\n      )[0],\n      \"direction\"\n    );\n  }, [table]);\n\n  const getColumnPinedOffset = useCallback(\n    (pinnedIndex: number, direction: \"left\" | \"right\") => {\n      if (direction === \"left\") {\n        return sum(\n          columnsPinnedInfo.left.map((item) => item.size).slice(0, pinnedIndex)\n        );\n      }\n\n      if (direction === \"right\") {\n        return sum(\n          columnsPinnedInfo.right\n            .map((item) => item.size)\n            .reverse()\n            .slice(0, table.getRightLeafColumns().length - pinnedIndex - 1)\n        );\n      }\n    },\n    [columnsPinnedInfo, table]\n  );\n\n  // 一些可以手动触发的特殊操作\n  useImperativeHandle(\n    tableActionRef,\n    () => ({\n      resetRowSelection: () => {\n        table.resetRowSelection();\n      },\n    }),\n    [table]\n  );\n\n  return (\n    <div\n      className={cn(\n        \"relative min-w-full\",\n        loading && \"pointer-events-none overflow-hidden select-none\"\n      )}\n    >\n      <div className=\"overflow-hidden\" ref={tableHeaderRef}>\n        <table className=\"w-full table-fixed\">\n          <thead className=\"relative border-b\">\n            {/* batch actions */}\n            {!(rowSelection?.single ?? false) &&\n              Object.keys(internalRowSelection).length > 0 &&\n              hasBulkActions && (\n                <tr className=\"absolute z-[2] flex w-full items-center space-x-2 bg-white px-3 py-2\">\n                  <td>\n                    <Checkbox\n                      checked={\n                        table.getIsAllRowsSelected()\n                          ? true\n                          : Object.keys(internalRowSelection).length > 0\n                          ? \"indeterminate\"\n                          : false\n                      }\n                      onCheckedChange={(value) => {\n                        table.toggleAllRowsSelected(\n                          [false, \"indeterminate\"].includes(value)\n                            ? false\n                            : true\n                        );\n                      }}\n                    />\n                  </td>\n\n                  <td className=\"text-sm text-gray-500\">\n                    {isRowSelectedAll\n                      ? translate(\n                          \"common:components.table.batchActions.selectedAll\"\n                        ) ?? \"Selected all\"\n                      : translate(\n                          \"common:components.table.batchActions.selectedRows\",\n                          {\n                            rows: Object.keys(internalRowSelection).length,\n                          }\n                        ) ??\n                        `Selected ${\n                          Object.keys(internalRowSelection).length\n                        } rows`}\n                  </td>\n\n                  {typeof rowSelection?.allowSelectAll !== \"undefined\" &&\n                    rowSelection.allowSelectAll && (\n                      <td>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"text-xs\"\n                          onClick={() => {\n                            if (isRowSelectedAll) {\n                              setIsRowSelectedAll(false);\n                            } else {\n                              table.toggleAllRowsSelected(true);\n\n                              setTimeout(() => {\n                                setIsRowSelectedAll(true);\n                              });\n                            }\n                          }}\n                        >\n                          {isRowSelectedAll\n                            ? translate(\n                                \"common:components.table.batchActions.cancel\"\n                              ) ?? \"Cancel\"\n                            : translate(\n                                \"common:components.table.batchActions.selectAll\"\n                              ) ?? \"Select all\"}\n                        </Button>\n                      </td>\n                    )}\n\n                  <td className=\"ml-auto flex space-x-2\">\n                    {rowSelection\n                      ?.bulkActions?.(\n                        Object.keys(internalRowSelection).map(\n                          (key) => table.getRow(key).original\n                        ),\n                        isRowSelectedAll\n                      )\n                      ?.map((action, index) => (\n                        <div key={index}>\n                          <Button\n                            {...action}\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"text-xs\"\n                          />\n                        </div>\n                      ))}\n                  </td>\n                </tr>\n              )}\n\n            {table.getHeaderGroups().map((headerGroup) => (\n              <tr className=\"relative\" key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <th\n                      className={cn(\n                        \"bg-white px-3 py-3.5 text-left text-sm font-semibold whitespace-nowrap\",\n                        typeof (header.column.columnDef as TableColumnProps<T>)\n                          ?.align !== \"undefined\" &&\n                          columnAlignClass[\n                            (header.column.columnDef as TableColumnProps<T>)\n                              .align as keyof typeof columnAlignClass\n                          ],\n                        typeof (header.column.columnDef as TableColumnProps<T>)\n                          ?.wordWrap !== \"undefined\" &&\n                          columnWrapClass[\n                            (header.column.columnDef as TableColumnProps<T>)\n                              .wordWrap as unknown as keyof typeof columnWrapClass\n                          ],\n                        header.column.getIsPinned() !== false &&\n                          \"sticky z-[1] bg-white\",\n                        header.column.getIsPinned() === \"left\" &&\n                          header.column.getPinnedIndex() ===\n                            table.getLeftLeafColumns().length - 1 &&\n                          \"drop-shadow-[1px_0_0_#e5e7eb]\",\n                        header.column.getIsPinned() === \"right\" &&\n                          header.column.getPinnedIndex() ===\n                            table.getRightLeafColumns().length - 1 &&\n                          \"drop-shadow-[-1px_0_0_#e5e7eb]\"\n                      )}\n                      key={header.id}\n                      style={{\n                        width: header.getSize(),\n                        left:\n                          header.column.getIsPinned() === \"left\" &&\n                          columnsPinnedInfo.left?.length > 0\n                            ? getColumnPinedOffset(\n                                header.column.getPinnedIndex(),\n                                \"left\"\n                              )\n                            : undefined,\n                        right:\n                          header.column.getIsPinned() === \"right\" &&\n                          columnsPinnedInfo.right?.length > 0\n                            ? getColumnPinedOffset(\n                                header.column.getPinnedIndex(),\n                                \"right\"\n                              )\n                            : undefined,\n                      }}\n                    >\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </th>\n                  );\n                })}\n              </tr>\n            ))}\n          </thead>\n        </table>\n      </div>\n\n      <div\n        className={cn(\n          typeof bodyHeight !== \"undefined\"\n            ? \"overflow-auto\"\n            : \"overflow-y-hidden\"\n        )}\n        style={{\n          minHeight:\n            typeof bodyHeight?.min !== \"undefined\"\n              ? `${bodyHeight?.min}px`\n              : undefined,\n          maxHeight:\n            typeof bodyHeight?.max !== \"undefined\"\n              ? `${bodyHeight?.max}px`\n              : undefined,\n        }}\n        onScroll={(e) => {\n          const scrollLeft = (e.target as HTMLElement).scrollLeft;\n\n          if (tableHeaderRef.current != null) {\n            tableHeaderRef.current.scrollLeft = scrollLeft;\n          }\n\n          if (tableFooterRef.current != null) {\n            tableFooterRef.current.scrollLeft = scrollLeft;\n          }\n        }}\n      >\n        <table className=\"w-full table-fixed\">\n          <tbody className=\"relative divide-y divide-gray-200\">\n            {table.getRowModel().rows.map((row) => (\n              <tr\n                className={cn(\n                  \"group bg-white hover:bg-gray-50\",\n                  onRow != null && \"cursor-pointer\"\n                )}\n                key={row.id}\n                onClick={(e) => {\n                  onRow?.(row.original)?.onClick?.(e);\n                }}\n              >\n                {row.getVisibleCells().map((cell) => (\n                  <td\n                    className={cn(\n                      \"bg-white px-3 py-4 text-sm break-words text-gray-500 group-hover:bg-gray-50\",\n                      typeof (cell.column.columnDef as TableColumnProps<T>)\n                        ?.align !== \"undefined\" &&\n                        columnAlignClass[\n                          (cell.column.columnDef as TableColumnProps<T>)\n                            .align as keyof typeof columnAlignClass\n                        ],\n                      typeof (cell.column.columnDef as TableColumnProps<T>)\n                        ?.wordWrap !== \"undefined\" &&\n                        columnWrapClass[\n                          (cell.column.columnDef as TableColumnProps<T>)\n                            .wordWrap as unknown as keyof typeof columnWrapClass\n                        ],\n                      cell.column.getIsPinned() !== false && \"sticky z-[1]\",\n                      cell.column.getIsPinned() === \"left\" &&\n                        cell.column.getPinnedIndex() ===\n                          table.getLeftLeafColumns().length - 1 &&\n                        \"drop-shadow-[1px_0_0_#e5e7eb]\",\n                      cell.column.getIsPinned() === \"right\" &&\n                        cell.column.getPinnedIndex() ===\n                          table.getRightLeafColumns().length - 1 &&\n                        \"drop-shadow-[-1px_0_0_#e5e7eb]\"\n                    )}\n                    key={cell.id}\n                    style={{\n                      width: cell.column.getSize(),\n                      left:\n                        cell.column.getIsPinned() === \"left\" &&\n                        columnsPinnedInfo.left?.length > 0\n                          ? getColumnPinedOffset(\n                              cell.column.getPinnedIndex(),\n                              \"left\"\n                            )\n                          : undefined,\n                      right:\n                        cell.column.getIsPinned() === \"right\" &&\n                        columnsPinnedInfo.right?.length > 0\n                          ? getColumnPinedOffset(\n                              cell.column.getPinnedIndex(),\n                              \"right\"\n                            )\n                          : undefined,\n                    }}\n                  >\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n\n        {data.length === 0 && (\n          <EmptyState\n            className=\"py-10\"\n            description={emptyStateDescription}\n            icon={emptyStateIcon}\n            title={emptyStateTitle}\n          />\n        )}\n      </div>\n\n      {table.getAllColumns().filter((item) => item.columnDef?.footer).length >\n        0 && (\n        <div className=\"overflow-hidden\" ref={tableFooterRef}>\n          <table className=\"w-full table-fixed border-t\">\n            <tfoot className=\"relative\">\n              {table.getFooterGroups().map((footerGroup) => (\n                <tr key={footerGroup.id}>\n                  {footerGroup.headers.map((header) => (\n                    <th\n                      className={cn(\n                        \"bg-white px-3 py-4 text-sm break-words text-gray-500\",\n                        typeof (header.column.columnDef as TableColumnProps<T>)\n                          ?.align !== \"undefined\"\n                          ? columnAlignClass[\n                              (header.column.columnDef as TableColumnProps<T>)\n                                .align as keyof typeof columnAlignClass\n                            ]\n                          : columnAlignClass.left,\n                        typeof (header.column.columnDef as TableColumnProps<T>)\n                          ?.wordWrap !== \"undefined\" &&\n                          columnWrapClass[\n                            (header.column.columnDef as TableColumnProps<T>)\n                              .wordWrap as unknown as keyof typeof columnWrapClass\n                          ],\n                        header.column.getIsPinned() !== false &&\n                          \"sticky z-[1] bg-white\",\n                        header.column.getIsPinned() === \"left\" &&\n                          header.column.getPinnedIndex() ===\n                            table.getLeftLeafColumns().length - 1 &&\n                          \"drop-shadow-[1px_0_0_#e5e7eb]\",\n                        header.column.getIsPinned() === \"right\" &&\n                          header.column.getPinnedIndex() ===\n                            table.getRightLeafColumns().length - 1 &&\n                          \"drop-shadow-[-1px_0_0_#e5e7eb]\"\n                      )}\n                      key={header.id}\n                      style={{\n                        width: header.column.getSize(),\n                        left:\n                          header.column.getIsPinned() === \"left\" &&\n                          columnsPinnedInfo.left?.length > 0\n                            ? getColumnPinedOffset(\n                                header.column.getPinnedIndex(),\n                                \"left\"\n                              )\n                            : undefined,\n                        right:\n                          header.column.getIsPinned() === \"right\" &&\n                          columnsPinnedInfo.right?.length > 0\n                            ? getColumnPinedOffset(\n                                header.column.getPinnedIndex(),\n                                \"right\"\n                              )\n                            : undefined,\n                      }}\n                    >\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.footer,\n                            header.getContext()\n                          )}\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </tfoot>\n          </table>\n        </div>\n      )}\n\n      {loading && (\n        <div className=\"absolute top-1/2 left-1/2 z-10 -translate-x-1/2 -translate-y-1/2\">\n          <Loader2 className=\"animate-spin\" />\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/turboost-ui/table/table.tsx"
    }
  ]
}