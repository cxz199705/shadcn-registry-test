{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "view",
  "type": "registry:component",
  "title": "View",
  "description": "A view component",
  "dependencies": [
    "lucide-react",
    "react-hook-form"
  ],
  "registryDependencies": [
    "button",
    "dialog",
    "input",
    "form",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/view/view.tsx",
      "content": "\"use client\";\n\nimport { ChevronDownIcon, PlusIcon, Loader2 } from \"lucide-react\";\nimport { type ReactElement, useCallback, useMemo, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Input } from \"@/registry/new-york/ui/input\";\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/registry/new-york/ui/dialog\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/new-york/ui/dropdown-menu\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\n\ninterface ViewFormData {\n  name: string;\n}\n\nexport enum ViewItemEditType {\n  RENAME = \"rename\",\n  DELETE = \"delete\",\n}\n\nexport interface ViewItem {\n  key: string;\n  label: string;\n  canDelete?: boolean;\n  canEdit?: boolean;\n}\n\nexport interface ViewProps {\n  items: ViewItem[];\n  activeKey?: string;\n  defaultActiveKey?: string;\n  canAdd?: boolean;\n  loading?: boolean;\n  onAdd?: (label: string, payload?: any) => void;\n  onEdit?: (\n    key: string,\n    type: ViewItemEditType,\n    payload?: { label: string }\n  ) => void;\n  onActiveChange?: (key: string) => void;\n  t?: Function;\n}\n\nexport function View({\n  items,\n  activeKey,\n  defaultActiveKey,\n  loading = false,\n  canAdd = false,\n  onAdd,\n  onEdit,\n  onActiveChange,\n  t,\n}: ViewProps): ReactElement {\n  const translate = useMemo(() => {\n    return typeof t === \"function\" ? t : () => undefined;\n  }, [t]);\n\n  const [internalActiveKey, setInternalActiveKey] = useState<\n    string | undefined\n  >(defaultActiveKey ?? items[0]?.key);\n\n  const [createViewDialogOpen, setCreateViewDialogOpen] = useState(false);\n  const [renameViewDialogOpen, setRenameViewDialogOpen] = useState(false);\n  const [deleteViewDialogOpen, setDeleteViewDialogOpen] = useState(false);\n\n  // 根据是否传入 activeKey 来决定激活的视图\n  const effectiveActiveKey = useMemo(() => {\n    return typeof activeKey !== \"undefined\" ? activeKey : internalActiveKey;\n  }, [activeKey, internalActiveKey]);\n\n  const selectedView = useMemo(() => {\n    return items.find((item) => item.key === effectiveActiveKey);\n  }, [effectiveActiveKey, items]);\n\n  const createViewForm = useForm<ViewFormData>({\n    values: {\n      name: \"\",\n    },\n  });\n\n  const renameViewForm = useForm<ViewFormData>({\n    values: {\n      name: selectedView?.label ?? \"\",\n    },\n  });\n\n  const handleCreateView = useCallback(\n    async ({ name }: ViewFormData) => {\n      await onAdd?.(name);\n      setCreateViewDialogOpen(false);\n      createViewForm.reset();\n    },\n    [createViewForm, onAdd]\n  );\n\n  const handleRenameView = useCallback(\n    async ({ name }: ViewFormData) => {\n      if (selectedView) {\n        await onEdit?.(selectedView.key, ViewItemEditType.RENAME, {\n          label: name,\n        });\n        setRenameViewDialogOpen(false);\n        renameViewForm.reset();\n      }\n    },\n    [selectedView, onEdit, renameViewForm]\n  );\n\n  const handleDeleteView = useCallback(async () => {\n    if (selectedView) {\n      await onEdit?.(selectedView.key, ViewItemEditType.DELETE);\n      setDeleteViewDialogOpen(false);\n    }\n  }, [onEdit, selectedView]);\n\n  // 生成可操作的按钮\n  const generateActionableButton = useCallback(\n    (\n      activator: ReactElement,\n      { key, canDelete = true }: ViewItem\n    ): ReactElement => {\n      return (\n        <DropdownMenu key={key}>\n          <DropdownMenuTrigger asChild>{activator}</DropdownMenuTrigger>\n\n          <DropdownMenuContent>\n            <DropdownMenuItem\n              onClick={() => {\n                setRenameViewDialogOpen(true);\n              }}\n            >\n              {translate(\"turboost_ui.view.rename_view\") ?? \"Rename\"}\n            </DropdownMenuItem>\n\n            {canDelete && (\n              <DropdownMenuItem\n                onClick={() => {\n                  setDeleteViewDialogOpen(true);\n                }}\n              >\n                {translate(\"turboost_ui.view.delete_view\") ?? \"Delete\"}\n              </DropdownMenuItem>\n            )}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      );\n    },\n    [setDeleteViewDialogOpen, setRenameViewDialogOpen, translate]\n  );\n\n  return (\n    <div className=\"flex items-center gap-1\">\n      {items.map((item, index) => {\n        const { key, label, canEdit = true } = item;\n\n        const button = (\n          <Button\n            key={`${key}-${index}`}\n            size=\"sm\"\n            variant={effectiveActiveKey === key ? \"secondary\" : \"ghost\"}\n            onClick={() => {\n              if (effectiveActiveKey !== key) {\n                if (typeof activeKey === \"undefined\") {\n                  setInternalActiveKey(key);\n                }\n\n                onActiveChange?.(key);\n              }\n            }}\n          >\n            <div className=\"flex items-center gap-1\">\n              {label}\n\n              {effectiveActiveKey === key && canEdit && (\n                <ChevronDownIcon className=\"h-3.5 w-3.5\" />\n              )}\n            </div>\n          </Button>\n        );\n\n        return effectiveActiveKey === key && canEdit\n          ? generateActionableButton(button, item)\n          : button;\n      })}\n\n      {/* 创建视图 */}\n      {canAdd && (\n        <Dialog\n          open={createViewDialogOpen}\n          onOpenChange={setCreateViewDialogOpen}\n        >\n          <DialogTrigger asChild>\n            <Button variant=\"ghost\" size=\"sm\">\n              <PlusIcon />\n            </Button>\n          </DialogTrigger>\n\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {translate(\"turboost_ui.view.create_view_dialog.title\") ??\n                  \"Create View\"}\n              </DialogTitle>\n            </DialogHeader>\n\n            <Form {...createViewForm}>\n              <form\n                className=\"space-y-4\"\n                onSubmit={createViewForm.handleSubmit(handleCreateView)}\n              >\n                <FormField\n                  name=\"name\"\n                  rules={{\n                    required:\n                      translate(\n                        \"turboost_ui.view.create_view_dialog.form.name_field.rule.required\"\n                      ) ?? \"Name is required\",\n                  }}\n                  control={createViewForm.control}\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        {translate(\n                          \"turboost_ui.view.create_view_dialog.form.name_field.label\"\n                        ) ?? \"Name\"}\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder={\n                            translate(\n                              \"turboost_ui.view.create_view_dialog.form.name_field.placeholder\"\n                            ) ?? \"Please enter view name\"\n                          }\n                          maxLength={40}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <DialogFooter>\n                  <Button type=\"submit\" disabled={loading}>\n                    {loading ? (\n                      <Loader2 className=\"animate-spin\" />\n                    ) : (\n                      translate(\n                        \"turboost_ui.view.create_view_dialog.form.submit_btn.content\"\n                      ) ?? \"Save\"\n                    )}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* 编辑视图 */}\n      <Dialog\n        open={renameViewDialogOpen}\n        onOpenChange={setRenameViewDialogOpen}\n      >\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {translate(\"turboost_ui.view.rename_view_dialog.title\") ??\n                \"Rename View\"}\n            </DialogTitle>\n          </DialogHeader>\n\n          <Form {...renameViewForm}>\n            <form\n              className=\"space-y-4\"\n              onSubmit={renameViewForm.handleSubmit(handleRenameView)}\n            >\n              <FormField\n                name=\"name\"\n                rules={{\n                  required:\n                    translate(\n                      \"turboost_ui.view.rename_view_dialog.form.name_field.rule.required\"\n                    ) ?? \"Name is required\",\n                }}\n                control={renameViewForm.control}\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      {translate(\n                        \"turboost_ui.view.rename_view_dialog.form.name_field.label\"\n                      ) ?? \"Name\"}\n                    </FormLabel>\n                    <FormControl>\n                      <Input {...field} maxLength={40} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <DialogFooter>\n                <Button type=\"submit\" disabled={loading}>\n                  {loading ? (\n                    <Loader2 className=\"animate-spin\" />\n                  ) : (\n                    translate(\n                      \"turboost_ui.view.rename_view_dialog.form.submit_btn.content\"\n                    ) ?? \"Save\"\n                  )}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* 删除视图 */}\n      <Dialog\n        open={deleteViewDialogOpen}\n        onOpenChange={setDeleteViewDialogOpen}\n      >\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {translate(\"turboost_ui.view.delete_view_dialog.title\") ??\n                \"Delete View\"}\n            </DialogTitle>\n          </DialogHeader>\n\n          <DialogDescription>\n            {translate(\"turboost_ui.view.delete_view_dialog.description\", {\n              viewName: selectedView?.label,\n            }) ??\n              `Are you sure you want to delete the view \"${selectedView?.label}\"?`}\n          </DialogDescription>\n\n          <DialogFooter>\n            <Button\n              variant=\"destructive\"\n              disabled={loading}\n              onClick={handleDeleteView}\n            >\n              {loading ? (\n                <Loader2 className=\"animate-spin\" />\n              ) : (\n                translate(\n                  \"turboost_ui.view.delete_view_dialog.delete_btn.content\"\n                ) ?? \"Delete\"\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/turboost-ui/view/view.tsx"
    }
  ]
}